      PROGRAM TRANS
C $Id: trans13.for 251 2008-12-12 10:26:49Z cct $
C PROGRAM FOR THE TRANSFORMATION OF FILES OF COORDINATES
C TO OR FROM GEOGRAPHICAL COORDINATES FROM/TO A PLANE SYSTEM.
C PROGRAMMED BY C.C.TSCHERNING, 1990.03.01.
C LATEST UPDATE: 1997.07.16 BY CCT.  
      IMPLICIT REAL *8(A-H,O-Z)
C LU1    LOGICAL UNIT TO READ COORDINATES FROM.
C NPTS   MAXIMAL NUMBER OF DATA POINTS. 
C
      PARAMETER (LU1=10,NPTS=200000)
      COMMON /ELL/ ELLIP(15,2),XDBLON(NPTS),YDBLAT(NPTS),TDAT(12),
     *TEMP(NPTS),SA(120),ELLIPTX(16),PROJTX(9)  
      LOGICAL TEST,GRID,IMGRID,FORWAR,REWERS,LSTORE,LSHIFT,LKEYB,
     *LSTOP,NOSTNO 
      COMMON /EUCL/X,Y,Z,XY,XY2,DISTO,DIST2
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      COMMON /ITRANC/DX,DY,DZ,EPS3,EPS2,EPS1,S1,AX,E2
      DIMENSION ISTNX(NPTS)
      CHARACTER*60 PROJTX
      CHARACTER*25 ELLIPTX
      CHARACTER*75 FIGTXT 
      CHARACTER*72 INAME,PNAME  
C
       LSTOP=.FALSE.
       TEST=.FALSE.
       PI4=DATAN(1.0D0) 
       PI=4.0D0*PI4 
       DEGRAD=PI/180.0D0 
       RADDEG=D1/DEGRAD 
C 
       WRITE(*,140)
 140   FORMAT(' MAP TRANSFORMATION PROGRAM, VERS. AUG. 23, 1994',/ 
     *' COPYRIGHT GEOPHYSICAL INSTITUTE, UNIV. COPENHAGEN, 1991, 94' 
     *//' THE PROGRAM TRANSFORM FROM GEOGRAPHICAL COORDINATES TO ',/
     *' PLANE OR 3-D CARTESIAN COORDINATES OR REVERSE',/
     *' INPUT IDENTIFYING TEXT (MAX. 72 CHAR). ') 
       READ(*,72)FIGTXT 
   72  FORMAT(A72) 
       WRITE(*,72)FIGTXT 
       WRITE(*,*)' FORWARD TRANSFORMATION (GEO TO XY(Z)) ? (T/F) '
       READ(*,*)FORWAR 
       REWERS=.NOT.FORWAR 
C
       WRITE(*,111)
  111  FORMAT(' SELECT SPHEROID:'/ 
     *' 1: SPHERE, 2: CLARKE 1866,'/
     *' 3: HAYFORD 1909 (INTERNATIONAL), 4: GRS 1980'/,
     *' 5: CLARK1880, 6: BESSEL 1841, 7: KRASOVSKY 1940, 8: WGS 1972'/
     *' 9: AUSTRALIAN 1965, 10: AIRY1849, 11: EVEREST 1830'/
     *' 12: HOUGH 1956,: 13: FISHER 1960, 14&15: SPHERE, 16: INPUT '/) 
       READ(*,*)ISPHER 
       IF (ISPHER.LT.17) THEN 
       WRITE(*,*) ' ELLIPSOID : ',ELLIPTX(ISPHER),ISPHER
       SEMIA=ELLIP(ISPHER,1)
       SEMIB=ELLIP(ISPHER,2)
       ELSE
       WRITE(*,*)' INPUT SEMI MAJOR AND MINOR AXIS IN M '
       READ(*,*)SEMIA,SEMIB 
       END IF 
       FLA1=(SEMIA-SEMIB)/SEMIA 
       IF (FLA1.GT.D0)FLA=D1/FLA1  
       WRITE(*,100)FLA  
  100  FORMAT(' 1/FLATTENING =',F12.7) 
C
       WRITE(*,112)
  112  FORMAT(' SELECT PROJECTION:'/
     * ' 1: U T M, 2: TRANSVERSE MERCATOR, 3: MERCATOR'/
     * ' 4: LAMBERT CONFORMAL CONIC (2 STD. PARAL.)'/
     * ' 5: POLAR STEREOGRAPHIC (AZIMUTHAL-),'/ 
     * ' 6: SYSTEM 34 JYLLAND, 7: SYSTEM 34 SJAELLAND,'/
     * ' 8: SYSTEM 45 BORNHOLM, 9: CARTESIAN (X,Y,Z) '/)
       READ(*,*)IPROJ 
       WRITE(*,*)'                   ;',PROJTX(IPROJ)
       IF (IPROJ.GT.5.AND.IPROJ.LT.9.AND.ISPHER.NE.3) WRITE(*,*)
     * ' WARNING *** HAYFORD ELLIPSOID MUST BE USED WITH S34 '
C 
C DEFINE PROJECTION SCALE FACTOR. 
       IF (IPROJ.EQ.1.OR.IPROJ.GT.5) CESFA=0.9996D0 
       IF (IPROJ.EQ.3) CESFA=D1      
       IF (IPROJ.EQ.1.OR.IPROJ.EQ.3.OR.IPROJ.GT.5) GO TO 610 
       WRITE(*,*)' INPUT CENTRAL SCALE FACTOR '
       READ(*,*)CESFA 
  610  DM=D1-CESFA 
C 
       IF (IPROJ.EQ.1.OR.IPROJ.GT.5) GO TO 770 
       WRITE(*,*)' INPUT LONGITUDE OF CENTRAL MERIDIAN IN DEG. '
       READ(*,*)CMER 
       CMERR=CMER*DEGRAD     
C 
       IF (IPROJ.GE.5) GOTO 774 
       IF (IPROJ.EQ.2) THEN
       WRITE(6,*)' INPUT ABSCISSA CONSTANT IN M. '
       READ(5,*)XCONST
       END IF
       WRITE(*,*)' INPUT LATITUDE OF BASE PARALLEL IN DEG. ' 
       READ(*,*)BPAR 
       IF (ABS(BPAR).GT.0.0D-10.AND.IPROJ.EQ.3)
     * WRITE(*,*)' Y=0 AT BASE PARALLEL FOR KMS ROUTINES ' 
       BPARR=BPAR*DEGRAD 
       IF (IPROJ.NE.4) GO TO 774 
       WRITE(*,*)' INPUT LATITUDE OF 1. & 2. STD. PARALLEL IN DEG. ' 
       READ(*,*)SPAR1,SPAR2 
       WRITE(*,*)SPAR1,SPAR2
       SPARR1=SPAR1*DEGRAD    
       SPARR2=SPAR2*DEGRAD    
       GO TO 774
C 
 770   IF (IPROJ.GE.5) GO TO 774
       WRITE(*,*)' INPUT UTM ZONE '
       READ(*,*)IZONE 
C FOR S34 PROJECTIONS, WE TRANSFORM FROM GEOGRAHICAL TO UTM ZONE
C 32 AND 33, AND THEN TO S34. 
 774   IF (IPROJ.EQ.6.OR.IPROJ.EQ.7) IZONE=32 
       IF (IPROJ.GT.7) IZONE=33 
C
       GO TO (792,792,793,794,796,792,792,792,780)IPROJ
 792   EASTPAR=D0
       IF (IPROJ.EQ.2) GO TO 797 
       CMERR=(-183+IZONE*6)*DEGRAD    
       EASTPAR=500000.0D0             
 797   CALL UTMCON(SEMIA,1/FLA,0,DM,EASTPAR,CMERR)
       GO TO 796
C
 793   CALL MRCCON(SEMIA,1/FLA,BPARR,CMERR,0.0) 
       GO TO 796
C
 794   CALL  LMBCON(SEMIA,1/FLA,SPARR1,SPARR2,1,CMERR,DM,0.0,BPAR)
       GO TO 796
 780   E2=FLA1*(2.0D0-FLA1)
       AX=SEMIA
       HP=0.0D0
       WRITE(*,*)' IS DATUM SHIFT NECESSARY ? (T/F)'
       READ(*,*)LSHIFT
       IF (LSHIFT) THEN
       WRITE(*,*)' INPUT DX,DY,DZ (M)'
       READ(*,*)DX,DY,DZ
       WRITE(*,*)' INPUT SCALE CHANGE -1.0'
       READ(*,*)S1
       S1=D1+S1
       WRITE(*,*)
     * ' INPUT ROTATIONS IN ARCSEC AROUND X,Y,Z AXES '
       READ(*,*)EPS3,EPS2,EPS1
       SECRAD=DEGRAD/3600.0D0
       EPS3=EPS3*SECRAD
       EPS2=EPS2*SECRAD
       EPS1=EPS1*SECRAD
       END IF
C
C FILE TO BE TRANSFORMED MUST HAVE RECORDS ON THE FORM:
C (1) NO. LATITUDE, LONGITUDE, DATA(1),..,DATA(NDUSE)
C (2) NO. Y, X, DATA(1),....,DATA(NDUSE), WITH Z=DATA(1),
C (3) NO. X, Y, Z, DATA(2), ....,DATA(NDUSE), WITH Z=DATA(1),
C (4) GRID FORM, WITH COORDINATES GIVEN IMPLICITLY THROUGH A
C     GRID LABEL. IN THIS CASE, NDE:= 0.  
C 
 796   WRITE(*,703)
 703   FORMAT('  AN INPUT RECORD MUST BE ON THE FORM: ',
     * /'  (1) NO. LATITUDE, LONGITUDE,DATA(1),..,DATA(N)'/
     * '  (2) NO. Y, X,DATA(1), DATA(2),..,DATA(N)',/,
     * '  (3) NO. X, Y, Z, DATA(2),...,DATA(N) (CARTESIAN)',/
     * '  (4) GRID FORM, WITH COORDINATES GIVEN IMPLICITLY ',/,
     * '  THROUGH A GRID LABEL.    IF TRANSFORMATION ',/ 
     *'  FROM (1) TO (3) DATA(1) MUST BE THE HEIGHT'//
     * '  INPUT NUMBER OF DATA ELEMENTS, AND ELEMENT NUMBER USED',/
     *'  (IF NO STATION NUMBER AVAILABLE IN FILE USE NEGATIVE ELEM',
     *'ENT NUMBER)',/
     *'  (ALL ELEMENTS WILL BE REPRODUCED, IF OUTPUT TO FILE) ') 
       READ(*,*)NDE,NDUSE
       NOSTNO=NDUSE.LT.0
       NDUSE=ABS(NDUSE) 
       IF (REWERS.AND.IPROJ.EQ.9.AND.NDE.LT.1) WRITE(6,*)
     *' WARNING : MISSING Z VALUE '
      WRITE(*,*)
     *' ANGLES IN 1: DD MM SS.S, 2: DD MM.M 3: DD.D, 4: CC.C ? ' 
       READ(*,*)IANG 
       IF (FORWAR) THEN
       IANGR=3
       ELSE
       IANGR=IANG
       IANG=3
       END IF
C
       WRITE(*,*)' ARE DATA GRIDDED ? (T/F) '
       READ(*,*)GRID 
       IMGRID=GRID.AND.NDE.EQ.0 
C 
       WRITE(*,*)' ARE INPUT DATA FROM THE KEY-BOARD (T/F) ?'
       READ(*,*)LKEYB
       IF (LKEYB) THEN
       IFILE=5
       ELSE
       IFILE=12
       WRITE(*,*)' INPUT NAME OF FILE WITH DATA TO BE TRANSFORMED ' 
       READ(*,72)INAME 
       OPEN(12,FILE=INAME,STATUS='OLD')
       END IF
C 
  798 WRITE(*,*)' TRANSFORMED DATA TO BE STORED ON FILE ? (T/F) '
      READ(*,*)LSTORE 
      IF (.NOT.LSTORE) GO TO 790 
      WRITE(*,*)' INPUT NAME OF FILE TO HOLD TRANSFORMED DATA ' 
       READ(*,72)PNAME 
       OPEN(14,FILE=PNAME,STATUS='UNKNOWN')
C
C INPUT DATA TO BE TRANSFORMED FROM UNIT 12.
C
 790   TMIN=1.0E8 
       TMAX=-TMIN
       I=0 
       IF (.NOT.GRID) GO TO 998
       WRITE(*,141)
 141   FORMAT(' GRID LABEL IS MIN, MAX NORTHGOING COORD,'/
     * ' MIN MAX EASTGOING COORD, N-SPACING, E-SPACING')
       IF (LKEYB) WRITE(*,*)' INPUT GRID LABEL (DD.D OR M) '
       READ(IFILE,*)YDBL0,YDBL1,XDBL0,XDBL1,YSTEP,XSTEP 
       NDEAST=(XDBL1-XDBL0)/XSTEP+1.001 
       NDSOU =(YDBL1-YDBL0)/YSTEP+1.001 
       I=NDEAST*NDSOU 
       NPTI=I
       IF (I.GT.NPTS)
     * WRITE(*,*)' ** ERROR ** GRID TOO LARGE ' 
       IF (LKEYB.AND.NDE.GT.0) WRITE(*,*)' INPUT ',I,' GRID VALUES '
       IF (NDE.GT.0) READ(IFILE,*)(TEMP(K),K=1,I)
       K=0
       DO 907 N=1,NDSOU 
       DO 907 M=1,NDEAST 
       K=K+1 
       YDBLAT(K)=YDBL1-(N-1)*YSTEP
       XDBLON(K)=XDBL0+(M-1)*XSTEP
       IF (NDUSE.EQ.0)TEMP(K)=0.0 
       IF (TEST) WRITE(*,*)K,YDBLAT(K),XDBLON(K),TEMP(K) 
       IF (TEMP(K).GT.TMAX) TMAX=TEMP(K) 
  907  IF (TEMP(K).LT.TMIN) TMIN=TEMP(K) 
C
  998 IF (REWERS) WRITE(*,*)' REWERSE TRANSFORMATION ' 
      IF (LKEYB) WRITE(*,*)' OUTPUT SEQUENCE WILL BE: '
      IF(.NOT.IMGRID.AND.IPROJ.GE.6.AND.IPROJ.LE.8.AND.FORWAR)
     *WRITE(*,102)
 102  FORMAT(' NO.   LATITUDE  LONGITUDE    YUTM  XUTM    ',
     *'     Y    X       DATA',/)
      IF(.NOT.IMGRID.AND.IPROJ.GE.6.AND.IPROJ.LE.8.AND.REWERS)
     *WRITE(*,121)
 121  FORMAT(' NO.    Y            X        YUTM  XUTM    ',
     *' LATITUDE LONGITUDE     DATA',/)
      IF(.NOT.IMGRID.AND.IPROJ.LT.6.AND.FORWAR) WRITE(*,103)
 103  FORMAT(' NO.       LATITUDE     LONGITUDE    Y             ',
     *'     X          DATA',/)
      IF(.NOT.IMGRID.AND.IPROJ.LT.6.AND.REWERS) WRITE(*,104)
 104  FORMAT(' NO.         Y           X          LATITUDE       ',
     *' LONGITUDE      DATA',/)
      IF(.NOT.IMGRID.AND.IPROJ.EQ.9.AND.FORWAR) WRITE(*,153)
 153  FORMAT(' NO.     LATITUDE     LONGITUDE  H       X      ',
     *'     Y        Z    ',/)
      IF(.NOT.IMGRID.AND.IPROJ.EQ.9.AND.REWERS) WRITE(*,154)
 154  FORMAT(' NO.         X           Y          Z        ',
     *' LATITUDE     LONGITUDE     H  ',/)
      IF (.NOT.GRID) NPTI=100000 
C 
      DO 630 J=1, NPTI
      IF (GRID)THEN    
      I=J
      TDAT(1)=TEMP(I) 
      GO TO 1000
      END IF
C 
      IF (NDE.GT.0) THEN
       IF (LKEYB.AND.FORWAR) WRITE(*,*)' INPUT NO. LAT, LONG, DATA '
       IF (LKEYB.AND.REWERS) WRITE(*,*)
     * ' INPUT NO. Y,X, DATA OR X,Y,Z, DATA(2),..,DATA(N) '
      ELSE
       IF (LKEYB.AND.FORWAR) WRITE(*,*)' INPUT NO. LAT, LONG '
       IF (LKEYB.AND.REWERS) WRITE(*,*)' INPUT NO. Y,X'
      END IF
       GO TO (401,402,403,403),IANG
  401  IF (NDE.GE.0) THEN  
       IF (NOSTNO) THEN 
       READ(IFILE,*,END=999)IDLAT,MLAT,SLAT,IDLON,MLON,SLON, 
     * (TDAT(K),K=1,NDE)
       ELSE 
       READ(IFILE,*,END=999)ISTNO,IDLAT,MLAT,SLAT,IDLON,MLON,SLON, 
     * (TDAT(K),K=1,NDE)
       END IF 
       ELSE 
       IF (NOSTNO) THEN 
       READ(IFILE,*,END=999)IDLAT,MLAT,SLAT
       ELSE 
       READ(IFILE,*,END=999)ISTNO,IDLAT,MLAT,SLAT,
     * IDLON,MLON,SLON 
       END IF 
       END IF 
       GO TO 410 
  402  IF (NDE.GE.0) THEN  
       IF (NOSTNO) THEN 
       READ(IFILE,*,END=999)IDLAT,SLAT,IDLON,SLON,  
     * (TDAT(K),K=1,NDE)
       ELSE 
       READ(IFILE,*,END=999)ISTNO,IDLAT,SLAT,IDLON,SLON,  
     * (TDAT(K),K=1,NDE)
       END IF 
       ELSE 
       IF (NOSTNO) THEN 
       READ(IFILE,*,END=999)SLAT,IDLON,SLON   
       ELSE 
       READ(IFILE,*,END=999)IDLAT,SLAT,IDLON,SLON   
       END IF 
       END IF 
       GO TO 410 
  403  IF (NDE.GE.0) THEN  
       IF (NOSTNO) THEN 
       READ(IFILE,*,END=999)SLAT,SLON,                
     * (TDAT(K),K=1,NDE)
       ELSE 
       READ(IFILE,*,END=999)ISTNO,SLAT,SLON,                
     * (TDAT(K),K=1,NDE)
       END IF
       ELSE 
       IF (NOSTNO) THEN 
       READ(IFILE,*,END=999)SLAT,SLON                
       ELSE 
       READ(IFILE,*,END=999)ISTNO,SLAT,SLON                
       END IF
       END IF
C 
       IF (IPROJ.EQ.2.AND.REWERS)SLON=SLON-XCONST
C 
  410  IF (NOSTNO) THEN
       ISTNX(J)=J     
       ELSE
       ISTNX(J)=ISTNO 
       END IF
       IF (LKEYB) THEN
       WRITE(*,*)' IS THIS LAST RECORD ? (T/F)'
       READ(*,*)LSTOP
       END IF
       CALL DDEG(IDLAT,MLAT,SLAT,YDBLAT(1),IANG) 
       CALL DDEG(IDLON,MLON,SLON,XDBLON(1),IANG) 
       I=1
       TEMP(I)=0.0
       IF (NDE.GT.0)TEMP(I)=TDAT(NDUSE) 
       IF (TEMP(I).GT.TMAX) TMAX=TEMP(I) 
       IF (TEMP(I).LT.TMIN) TMIN=TEMP(I) 
C
 1000 IF (FORWAR) RLON=XDBLON(I)*DEGRAD     
      IF (FORWAR) RLAT=YDBLAT(I)*DEGRAD     
      IF (REWERS) RLON=XDBLON(I)
      IF (REWERS) RLAT=YDBLAT(I) 
      GO TO (977,977,978,979,980,981,981,981,970),IPROJ 
 977  CALL UTG(RLAT,RLON,YPODER,XPODER,REWERS)
      IF (IPROJ.EQ.2.AND.FORWAR)XPODER=XPODER+XCONST
      GO TO 976 
 978  CALL MTG(RLAT,RLON,YPODER,XPODER,REWERS)
      GO TO 976
 979  CALL LTG(RLAT,RLON,YPODER,XPODER,REWERS)
      XPODER=-XPODER
      IF (REWERS)XPODER=XPODER+2*CMERR 
      GO TO 976
 980  CALL POLSTER(RLAT,RLON,YPODER,XPODER,SEMIA,1/FLA,CMERR,REWERS,
     .             CESFA)
      GO TO 976 
 981  IF (FORWAR) THEN
      CALL UTG(RLAT,RLON,YPODER,XPODER,REWERS)
      Y1=YPODER
      X1=XPODER
      CALL UTS34P(Y1,X1,YPODER,XPODER,IPROJ-5,FORWAR) 
C     CALL UTS34(Y1,X1,YPODER,XPODER,SA,IPROJ-5,FORWAR) 
      GO TO (441,442,443,443),IANG 
 441  WRITE(*,446)J,IDLAT,MLAT,SLAT,IDLON,MLON,SLON,
     *Y1,X1,YPODER,XPODER 
 446  FORMAT(I4,I3,I3,F5.1,I4,I3,F5.1,4F11.2/5F8.1) 
      GO TO 445 
 442  WRITE(*,447)J,IDLAT,SLAT,IDLON,SLON,Y1,X1,YPODER,XPODER 
 447  FORMAT(I4,I3,F7.3,I4,F7.3,4F11.2/5F8.1) 
      GO TO 445 
 443  WRITE(*,308)J,YDBLAT(I),XDBLON(I),Y1,X1,YPODER,XPODER 
 308  FORMAT(I4,2F10.4,4F11.2/5F8.1)
 445  CONTINUE 
      ELSE  
      CALL UTS34P(YDBLAT(I),XDBLON(I),Y1,X1,IPROJ-5,FORWAR) 
      X2=X1
      Y2=Y1 
      YPODER=RLAT*RADDEG
      XPODER=RLON*RADDEG
      CALL UTG(Y2,X2,RLAT,RLON,REWERS) 
      CALL ANG(IDEGY,MINY,SECY,RLAT,IANGR)
      CALL ANG(IDEGX,MINX,SECX,RLON,IANGR)
      GO TO (461,462,463,463),IANGR
 461  WRITE(*,465)J,XDBLON(I),YDBLAT(I),Y1,X1,IDEGY,MINY,  
     *SECY,IDEGX,MINX,SECX
 465  FORMAT(I4,4F11.2,2(I4,I3,F6.2))
      GO TO 467
 462  WRITE(*,466)J,XDBLON(I),YDBLAT(I),Y1,X1,IDEGY,SECY,   
     *IDEGX,SECX
 466  FORMAT(I4,4F11.2,2(I4,F7.3))
      GO TO 467
 463  WRITE(*,309)J,XDBLON(I),YDBLAT(I),Y1,X1,SECY,SECX     
 309  FORMAT(I4,4F11.2,2F10.4)
 467  CONTINUE
      END IF 
      GO TO 976
 970  IF (FORWAR) THEN
      COSLAP=COS(RLAT)
      SINLAP=SIN(RLAT)
      COSLOP=COS(RLON)
      SINLOP=SIN(RLON)
      IF (NDE.GT.0) HP=TDAT(1)
C     CALL EUCLID(COSLAP,SINLAP,COSLOP,SINLOP,HP)
      CALL GEOEUC(RLAT,RLON,HP,.TRUE.)
      GO TO (868,869,870,870),IANG
  868 WRITE(*,866)J,IDLAT,MLAT,SLAT,IDLON,MLON,SLON,HP,X,Y,Z
  866 FORMAT(I3,2(I4,I3,F6.2),F8.2,3F12.2)
      GO TO 871
  869 WRITE(*,867)J,IDLAT,SLAT,IDLON,SLON,HP,X,Y,Z
  867 FORMAT(I3,2(I4,F9.5),F8.2,3F12.2)
      GO TO 871
  870 WRITE(*,864)J,YDBLAT(I),XDBLON(I),HP,X,Y,Z
  864 FORMAT(I3,2F16.6,F11.2,3F12.2)
  871 YPODER=X
      XPODER=Y
      TDAT(1)=Z
      ELSE
      X=YDBLAT(I)
      Y=XDBLON(I)
      Z=TDAT(1)
      XY2=X**2+Y**2
      DIST2=XY2+Z**2
      DISTO=SQRT(DIST2)
C     CALL ETRANS(SINLAP,COSLAP,YPODER,SINLOP,COSLOP,XPODER,HP)
      CALL GEOEUC(YPODER,XPODER,HP,.FALSE.)
      CALL ANG(IDEGY,MINY,SECY,YPODER,IANGR)
      CALL ANG(IDEGX,MINX,SECX,XPODER,IANGR)
      TDAT(1)=HP 
      IF (IANGR.EQ.1) WRITE(6,701)
     *J,X,Y,Z,IDEGY,MINY,SECY,IDEGX,MINX,SECX,HP
 701  FORMAT(I3,3F12.2,2(I5,I3,F6.2),F8.2)
      IF (IANGR.EQ.2) WRITE(6,702)J,X,Y,Z,IDEGY,SECY,IDEGX,SECX,HP
 702  FORMAT(I3,3F12.2,2(I5,F9.5),F8.2)
      YPODER1=YPODER*RADDEG
      XPODER1=XPODER*RADDEG
      IF (HP.LT.9999.9) then
      IF (IANGR.EQ.3)WRITE(*,865)J,X,Y,Z,YPODER1,XPODER1,HP
  865 FORMAT(I3,3F12.2,2F14.6,F8.2)
      ELSE
      IF (IANGR.EQ.3)WRITE(*,1865)J,X,Y,Z,YPODER1,XPODER1,HP
 1865 FORMAT(I3,3F12.2,2F14.6,F12.1)
      END IF
      END IF 
      IF (NDE.GT.1.AND.NDUSE.GT.1)WRITE(6,882)TDAT(NDUSE)
  882 FORMAT(F8.2)      
C
 976  IF (.NOT.IMGRID.AND.IPROJ.LE.5.AND.REWERS) THEN
      CALL ANG(IDEGY,MINY,SECY,YPODER,IANGR)
      CALL ANG(IDEGX,MINX,SECX,XPODER,IANGR)
      END IF 
      YPODER1=YPODER*RADDEG
      XPODER1=XPODER*RADDEG
      IF (.NOT.(LSTORE.AND.REWERS)) GO TO 1467
      GO TO (1461,1462,1463,1463),IANGR
 1461 WRITE(14,1465)ISTNX(J), IDEGY,MINY, SECY,IDEGX,MINX,SECX,
     *(TDAT(K),K=1,NDE)  
 1465 FORMAT(I8,2(I4,I3,F8.4),8F8.3)
      GO TO 1467
 1462 WRITE(14,1466)ISTNX(J),IDEGY,SECY, IDEGX,SECX,
     *(TDAT(K),K=1,NDE)  
 1466 FORMAT(I8,2(I4,F8.4),8F8.3)
      GO TO 1467
 1463 WRITE(14,1309)ISTNX(J),SECY,SECX,    
     *(TDAT(K),K=1,NDE)  
 1309 FORMAT(I8,2F14.8,f11.2,8F8.3)
 1467 CONTINUE
      IF (LSTORE.AND.FORWAR) WRITE(14,107)ISTNX(J),YPODER,XPODER,
     *(TDAT(K),K=1,NDE) 
 107  FORMAT(I8,3F13.2,8F8.2) 
      IF (.NOT.IMGRID.AND.IPROJ.LE.5.AND.FORWAR) THEN  
      GO TO (411,412,413,413),IANG
 411  WRITE(*,131)J,IDLAT,MLAT,SLAT,IDLON,MLON,SLON
     *,YPODER,XPODER,TEMP(I) 
 131  FORMAT(I3,I4,I3,F7.3,1X,I5,I3,F7.3,2F16.6,F8.1) 
      GO TO 414 
 412  WRITE(*,132)J,IDLAT,SLAT,IDLON,SLON,YPODER,XPODER,TEMP(I) 
 132  FORMAT(I3,I4,F10.6,1X,I5,F10.6,2F16.6,F8.1) 
      GO TO 414 
 413  WRITE(*,101)J,YDBLAT(I),XDBLON(I),YPODER,XPODER,TEMP(I) 
 101  FORMAT(I3,2F15.10,2F16.6,F8.1) 
 414  END IF 
      IF (.NOT.IMGRID.AND.IPROJ.LE.5.AND.REWERS) THEN
c     CALL ANG(IDEGY,MINY,SECY,YPODER,IANGR)
c     CALL ANG(IDEGX,MINX,SECX,XPODER,IANGR)
      YPODER=YPODER*RADDEG    
      XPODER=XPODER*RADDEG    
      GO TO (851,852,853,853),IANGR
 851  WRITE(*,861)J,YDBLAT(I),XDBLON(I),IDEGY,MINY,SECY,
     *IDEGX,MINX,SECX,TEMP(I)
 861  FORMAT(I3,2F14.4,2(I4,I3,F8.4),F8.2)
      GO TO 854
 852  WRITE(*,862)J,YDBLAT(I),XDBLON(I),IDEGY,SECY,
     *IDEGX,SECX,TEMP(I)
 862  FORMAT(I3,2F14.4,2(I4,F11.7),F8.2)
      GO TO 854
 853  WRITE(*,416)J,YDBLAT(I),XDBLON(I),YPODER,XPODER,TEMP(I) 
 416  FORMAT(I3,2F14.4,2F16.11,F8.1) 
 854  END IF
      IF (IMGRID.AND.IPROJ.LE.5) 
     *WRITE(*,105)J,YDBLAT(I),XDBLON(I),YPODER,XPODER 
 105  FORMAT(I5,2F16.5,2F16.6) 
      IF (LSTOP) GO TO 999
 630  CONTINUE
C 
  999 IF (GRID.OR.IPROJ.EQ.9) GO TO 906 
       IF (LKEYB) J=J+1
       WRITE(*,901)J-1,TMIN,TMAX 
  901  FORMAT(' NUMBER OF POINTS INPUT',I9,', MIN=',F9.3,
     * ', MAX=',F9.3) 
       IF (.NOT.LKEYB) CLOSE(12) 
  906 IF (LSTORE) CLOSE(14) 
      STOP
      END 
C
      SUBROUTINE CALCLAM(B0,C1,C2,E,A,C)
C---------------------------------------------------
C       SUBROUTINE FOR CALCULATING PHI0 AND OTHER PARAMETERS
C       USED IN THE TRANSFORMATION-FORMULARS OF LAMBERT
C       CONFORM CONIC PROJECTION WITH TWO STD. PARALLELS.
C       THE FORMULARS USED ARE FROM RICHARDUS/ADLER P.90-95
C       PROGRAMMED APRIL 1990 BY K.KELLER, GEOPHYSICAL INSTITUTE. 
C-------------------------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      DIMENSION B(3),DN(3),F(3)
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      B(1)=C1
      B(2)=C2
C
      DO 10 I=1,2
      DN(I)=A/DSQRT(1-((E*DSIN(B(I)))**2))
      F(I)=DTAN(PI4-B(I)/2)*
     .     (((1+E*DSIN(B(I)))/
     .       (1-E*DSIN(B(I))))**(E/2))
C
10    CONTINUE
C
      ABSLAT=ABS(C1-C2)
      IF (ABSLAT.LT.0.1D-10) THEN
       B0=C1
       SINB0=DSIN(B0)
       GO TO 20
      ENDIF
      SINB0=(DLOG(DN(1)*DCOS(B(1)))-DLOG(DN(2)*DCOS(B(2))))/
     .(DLOG(F(1))-DLOG(F(2)))
      B0=DASIN(SINB0)
20    C=DN(2)*DCOS(B(2))/(SINB0*(F(2)**(SINB0)))
      G=45.0D0/PI4
      B0G=B0*G
      C1G=C1*G
      C2G=C2*G
      WRITE(*,*)'PHI1 , PHI2 , PHI0 ',C1G,C2G,B0G
C
      RETURN
      END
C
      SUBROUTINE POLSTER(RLAT,RLON,Y,X,A,F,CMER,REWERS,CESFA)
C-----------------------------------------------------------
C    THIS SUBROUTINE TRANSFORMS GEOGRAPHICAL COORDINATES
C    INTO X/Y COORDINATES BY THE POLAR STEREOGRAPHC
C    PROJECTION AND INVERSE.
C    THE FORMULARS USED ARE (5.102) & (5.105)
C    FROM  RICHARDUS/ADLER "MAP PROJECTIONS" P.97-99
C    NOTE : THERE ARE ERRORS IN THE BOOK!
C    THE INVERSE FORMULAS USED ARE FROM J.P.SNYDER :
C    'MAP PROJECTIONS USED BY THE U.S.GEOLOGICAL SURVEY'.
C    GEOLOGICAL SURVEY BULLETIN 1532.(1982). P. 153-165.
C    PROGRAMMED BY K.KELLER, GEOPHYSICAL INSTITUTE, 1990. 
C-----------------------------------------------------------
C
      IMPLICIT  REAL*8(A-H,O-Z)
      LOGICAL REWERS 
      REAL*8 N
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
C
C     WRITE(*,*)'RLAT,TLON,F,CMER,A',RLAT,RLON,F,CMER,A
C
C     ECCENTRICITETEN BEREGNES
      E=DSQRT(F*(D2-F))
C
      IF(REWERS) GOTO 100
C     GEO TO POLAR :
      CALL GTP (RLAT,RLON,Y,X,A,F,CMER,REWERS,CESFA,E)
      CALL PTG (Y,X,RLAT1,RLON1,A,F,CMER,REWERS,CESFA,E)
C     write(*,*)  
C     write(*,*)rlat,rlon,y,x
C     write(*,*)rlat1,rlon1
      GOTO 200
100   CONTINUE
C     POLAR TO GEO :
      CALL PTG(RLON,RLAT,Y,X,A,F,CMER,REWERS,CESFA,E)
      CALL GTP(Y,X,RLON1,RLAT1,A,F,CMER,REWERS,CESFA,E)
C-----CHECKING THE TRANSFORMATION. --------------------------
200   CONTINUE
C     SET TOLERANCE :
      TOL = 0.001D0
      DIFF1=DABS(RLAT1-RLAT)
      DIFF2=DABS(RLON1-RLON)
      IF(DIFF1.GT.TOL.OR.DIFF2.GT.TOL) THEN
        WRITE(*,*)'ERROR IN TRANFORMATION POLAR TO/FROM GEO'
        WRITE(*,*)'TOLERANCE = ',TOL
      ENDIF
C
      RETURN
      END
C
      SUBROUTINE GTP(RLAT,RLON,Y,X,A,F,CMER,REWERS,CESFA,E)
C------FORWARD TRANSFORMATION---------------------------------
      IMPLICIT  REAL*8(A-H,O-Z)
      LOGICAL REWERS
      REAL*8 N
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2
C
      TA=DTAN(PI4-RLAT/D2)
      ES=E*DSIN(RLAT)
      E2=E/D2
C
      RO=2*A*CESFA*((D1-E)**(-0.5D0+E2))*
     .       ((D1+E)**(-0.5D0-E2))*TA*
     .       ((D1+ES)/(D1-ES))**E2
C     WRITE(*,*)'RHO',RO
      RLON=RLON-CMER
      Y=RO*DCOS(RLON)
      Y=-Y
      X=RO*DSIN(RLON)
C
      RETURN
      END
C
      SUBROUTINE PTG(RLAT,RLON,Y,X,A,F,CMER,REWERS,CESFA,E)
C-----THE INVERSE TRANSFORMATION------------------------
      IMPLICIT  REAL*8(A-H,O-Z)
      LOGICAL REWERS
      REAL*8 N
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2
C
      RO=DSQRT(RLON**2+RLAT**2)
      E1=D1+E
      E11=D1-E
      C=((E1**E1)*(E11**E11))
      C=DSQRT(C)*RO/(CESFA*A*D2)
C
C     FIRST TRIAL IN ITERATION :
      B=PI/D2-D2*DATAN(C)
C
      BGL=100000
C     I=0
66    CONTINUE
      T=D1-E*DSIN(B)
      N=D1+E*DSIN(B)
      B=DATAN(C*(T/N)**(E/D2))
      B=PI/D2-D2*B
      IF (DABS(B-BGL).LT.1.0D-20) GOTO 68
      BGL=B
C     I=I+1
      GOTO 66
C
68    CONTINUE
C     WRITE(*,*)'I',I
      Y=B
      X=CMER+DATAN2(RLON,-RLAT)
      IF(X.LT.0.0D0) X=X+(2*PI)
C
      RETURN
      END
C
C
      SUBROUTINE MRCCON(A,F,LATITUDE,LONGITUDE,EASTPAR)
C
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     -----------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8 LATITUDE,LONGITUDE
C
C SUBROUTINE   SET MERCATOR CONSTANT
C ----------------------------------
C A,F,LATITUDE,LONGITUDE,EASTPAR = INPUT PARAMS REAL*8
C DESCRIBING THE COORD SYSTEM
C
C SA            RETURN PARAMETERS  COMMON ARRAY
C
C AT RETURN SA WILL HAVE THE FOLLOWING CONTENT:
C INDEX        CONTENT
C 1          (REAL) RADIUS OF CURV.FOR THE CHOSEN LAT IN M
C 2          (REAL) COT(PI/4 + GAUSSIAN LAT)
C 3          (REAL) TRANSLATION PARAM FOR ZERO NORTH
C 4          (REAL) TRANSLATION PARAM FOR ZERO EAST (NOT USED)
C 5          (REAL) NORTHING FOR CHOSEN ZERO
C 6          (REAL) EASTING FOR CHOSEN ZERO
C 7-10         (REAL) COEFF FOR GEO->GAUSS LATITUDE
C 11-14        (REAL) COEFF FOR GAUSS->GEO LATITUDE  
C 15         (REAL) TOLERANCE FOR M -> G
C 16         (REAL) TOLERANCE FOR G -> M
C
      REAL*8 N,N0,MGTOL
      REAL*8 GEOTGAUS(4),GAUSTGEO(4),MSA
      COMMON /MERCATOR/MSA(22)
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      EQUIVALENCE (RAD,MSA(1)),(SA2,MSA(2)),(TRANSNORTH,MSA(3)),
     .(N0,MSA(5)),(E0,MSA(6)),(GEOTGAUS(1),MSA(7)),
     .(GAUSTGEO(1),MSA(11)),(MGTOL,MSA(15)),(GMTOL,MSA(16))
C
C TEST
C      WRITE(*,*)' COORD. SYS. CONSTANTS IN MRCCON '
C      WRITE(*,*)'A= ',A
C      WRITE(*,*)'F= ',F
C      WRITE(*,*)'LATITUDE = ',LATITUDE*RADDEG 
C      WRITE(*,*)'LONGITUDE =',LONGITUDE*RADDEG 
C      WRITE(*,*)'EASTPAR =',EASTPAR
C
      TRANSNORTH=EASTPAR
      N=F/(2.0D0-F)
C
C RAD=RADIUS AT THE CHOSEN LATITUDE 
      RAD=A*DCOS(LATITUDE)/
     .    DSQRT(1.0D0-(2.0D0*F-F**2.0D0)*(DSIN(LATITUDE)**2.0D0))
C
COMMENT KW P 186-187 (51)-(52)
      GEOTGAUS(1)=N*(-2.0D0+N*(2.0D0/3.0+N*( 4.0D0/3.0  -N*82.0/45.0)))
      GEOTGAUS(2)=N**2*       (5.0D0/3.0+N*(-16.0D0/15.0-N*13.0/9.0))
      GEOTGAUS(3)=N**3*                    (-26.0D0/15.0+N*34.0/21.0)
      GEOTGAUS(4)=N**4*                                1237.0D0/630.0
C
COMMENT KW P190-191 (61)-(62)
      GAUSTGEO(1)=N*(2.0D0+N*(-2.0D0/3.0 +N*(-2.0D0    +N*116.0/45.0)))
      GAUSTGEO(2)=N**2*      ( 7.0D0/3.0 +N*(-8.0D0/5.0 -N*227.0/45.0))
      GAUSTGEO(3)=N**3*                     (56.0D0/15.0-N*136.0/35.0)
      GAUSTGEO(4)=N**4*                                4279.0D0/630.0
C
      C1=0.0D0
      C2=0.0D0
      COS2B=2.0D0*DCOS(2.0D0*LATITUDE)
      DO 10 I=4,1,-1
      C=C1*COS2B-C2+GEOTGAUS(I)
      C2=C1
      C1=C
   10 CONTINUE
      C=LATITUDE+C1*DSIN(2.0D0*LATITUDE)
      C=(PI/2.0D0+C)/2.0D0
C
      SA2=DCOS(C)/DSIN(C)
      N0=-DLOG(SA2)*RAD - EASTPAR
      E0=LONGITUDE*RAD - EASTPAR
C TOLERANCES
      MGTOL=0.0015D0
      GMTOL= MGTOL/A
C
C TEST OUTPUT
C        WRITE(*,*)' SA I MRCCON'
C        WRITE(*,*)' RAD=     ',RAD
C        WRITE(*,*)' SA2=     ',SA2
C        WRITE(*,*)' TRANSNORTH=',TRANSNORTH
C        WRITE(*,*)' N0=      ',N0
C        WRITE(*,*)' E0=      ',E0
C        WRITE(*,*)' GEOTGAUS= ',(GEOTGAUS(K),K=1,4)
C        WRITE(*,*)' GAUSTGEO= ',(GAUSTGEO(K),K=1,4)
C        WRITE(*,*)' MGTOL=     ',MGTOL
C        WRITE(*,*)' GMTOL=     ',GMTOL
C
      RETURN
      END
C 
C
      SUBROUTINE MTG(N, E, B, L, DIRECT) 
C     ---------------------------------
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8          N, E, B, L
      LOGICAL                          DIRECT
C
      REAL*8 N0,N1,N2,MGTOL,NCHECK,NDIFF,LL
      REAL*8 GEOTGAUS(4),GAUSTGEO(4),MSA(22)
      COMMON /MERCATOR/MSA
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      EQUIVALENCE (RAD,MSA(1)),(SA2,MSA(2)),(TRANSNORTH,MSA(3))
      EQUIVALENCE (N0,MSA(5)),(E0,MSA(6))
      EQUIVALENCE (GEOTGAUS(1),MSA(7)),(GAUSTGEO(1),MSA(11))
      EQUIVALENCE (MGTOL,MSA(15)),(GMTOL,MSA(16))
C
C  SUBROUTINE MERCATOR <-> GEOGRAPHIC
C  ----------------------------------
C
C M_T_G          
C DUAL AUTOCHECKING PROCEDURE FOR TRANSFORMATION BETWEEN GEOGRA-
C PHICAL COORDINATES AND MERCATOR COORDINATES. THE PROCEDURE 
C TRANSFORMS  MRC -> GEO  WHEN DIRECT IS TRUE  AND  GEO -> MRC
C WHEN DIRECT IS FALSE.
C AN ALARM IS PRODUCED WHEN THE CHECK BY THE INVERSE TRANSFORM-
C ATION EXCEEDS THE TOLERANCE OF 1.5 MM OR ANOTHER VALUE SET BY
C THE USER IN SA(15) FOR MRC-> GEO, OR SA(16) FOR GEO -> MRC.
C 
C N, E           (CALL)         DB PRES REAL
C THE INPUT COORDINATES (IF DIRECT THEN MERCATOR ELSE GEOGR).
C IN GEOTYPE UNITS.
C 
C B, L           (RETURN)       DB PRES REAL
C THE TRANSFORMED COORDINATES (IF DIRECT THEN GEOGR. ELSE
C MERCATOR) IN GEOTYPE UNITS.
C 
C MSA           (CALL)         COMMON ARRAY
C TRANSFORMATION CONSTANTS FOR DIRECT AND INVERSE TRANFORMATION.
C SEE MRCCON FOR FURTHER DESCRIPTIONS
C 
C DIRECT         (CALL)         LOGICAL
C DETERMINES WHICH TRANSFORMATION IS TO BE DONE.
C DIRECT = TRUE  => TRANSFORMATION MRC -> GEO
C DIRECT = FALSE => TRANSFORMATION GEO -> MRC.
C 
C
C SKREVET AF HENRIK TOUGAARD, MAJ 1978
C EFTER TR_M_T_G OG TR_G_T_M.
C OVERSAT TIL FORTRAN77 AF ANNETTE L P JULI 86
C
C TEST
C        WRITE(*,*)' SA I MTG'
C        WRITE(*,*)' RAD=     ',RAD
C        WRITE(*,*)' SA2=     ',SA2
C        WRITE(*,*)' TRANSNORTH=',TRANSNORTH
C        WRITE(*,*)' N0=      ',N0
C        WRITE(*,*)' E0=      ',E0
C        WRITE(*,*)' GEOTGAUS= ',(GEOTGAUS(K),K=1,4)
C        WRITE(*,*)' GAUSTGEO= ',(GAUSTGEO(K),K=1,4)
C        WRITE(*,*)' MGTOL=     ',MGTOL
C        WRITE(*,*)' GMTOL=     ',GMTOL
C        WRITE(*,*)' N=      ',N
C        WRITE(*,*)' E=      ',E
C
C     TRANSFORMATION SEQUENCE
      I=3
      IF (DIRECT) I=1
      IH=4 - I
      IS=2 - I
C
C  CHECK VALUES
      NCHECK=N
C     ECHECK=E
C
      DO 100 I=I,IH,IS
      GOTO (10,20,30) I
C
C     CASE 1   MRC -> GEO
   10 CONTINUE
C      WRITE(*,*)' CASE 1 MERCATOR TIL GEOGRAFISK'
      N1= (N+N0)/RAD
      E1= (E+E0)/RAD
C
C     KW P 232 (7A)
      GAUSB=DATAN(DSINH(N1))
C
C     KW P 191 (61-0)  USING CLENSHAW
      GAUSB2=2.0D0*GAUSB
      CLENSHAW= 2.0D0*DCOS(GAUSB2)
      C1=0.0D0
      C2=0.0D0
      DO 11 J=4,1,-1
        C= C1*CLENSHAW-C2+GAUSTGEO(J)
        C2=C1
        C1=C
   11 CONTINUE
      BB=GAUSB+C1*DSIN(GAUSB2)
      LL=E1
C
C     GEO DIFF FOR CHECK
      IF(.NOT.DIRECT) THEN
        CB=DCOS(BB)
        TOL= GMTOL/CB
        NDIFF= BB-NCHECK
C       EDIFF= LL-ECHECK
      ENDIF
      GOTO 100
C
C
C     CASE 2 TRANSFER RESULTS
   20 CONTINUE
C      WRITE(*,*)' CASE 2 TRANSFER RESULTS'
      B=BB
      N=BB
      L=LL
      E=LL
      GOTO 100
C
C
C       CASE 3  GEO -> MRC 
C      KW P 186 (51) USING CLENSHAW
   30 CONTINUE
C      WRITE(*,*)' CASE 3 GEOGRAFISK TIL MERCATOR'
      N2=2.0D0*N
      CLENSHAW= 2.0D0*DCOS(N2)
      C1=0.0D0
      C2=0.0D0
      DO 33 J= 4,1,-1
        C= C1*CLENSHAW - C2 + GEOTGAUS(J)
        C2= C1
        C1= C
   33 CONTINUE
C
      GAUSB= N + C1*DSIN(N2)
C
C     KW P 232 (6)
      C= (PI/2.0D0 + GAUSB)/2.0D0
      Q= DLOG(SA2*DSIN(C)/DCOS(C))*RAD
C
      BB=Q+TRANSNORTH
      Q= E*RAD
      LL= Q - E0
C
C     MRC DIFF FOR CHECK
      IF(DIRECT) THEN
        TOL= MGTOL
        NDIFF= BB-NCHECK
C       EDIFF= LL-ECHECK
      ENDIF
  100 CONTINUE
C
C
C  ERROR ACTIONS
      IF (DABS(NDIFF).LT.TOL) RETURN
      WRITE(*,*)'M T G  TOLERANCE ERROR'
      WRITE(*,*)'DIFFERENCE,TOLERANCE ',NDIFF,TOL
      RETURN
      END
C
C
      SUBROUTINE UTMCON(A,F,COORSYS,DM,EASTPAR,LONGITUDE)
C     ---------------------------------------------------
C
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      INTEGER*2 COORSYS
      REAL*8 LONGITUDE
C
C SUBROUTINE SET UTM CONSTANT
C ________________________
C THE PROCEDURE PRODUCES THE CONSTANTS NEEDED IN THE TRANSFOR-
C MATIONS BETWEEN TRANSVERSAL MERCATOR AND GEOGRAPHICAL COORDINA-
C TES AND THE TOLERANCES NEEDED FOR THE CHECK OF THE TRANSFOR-
C MATIONS. INPUT PARAMETERS DEFINE A TRANSVERSAL MERCATOR SYSTEM.
C THE FORMULAE ARE TAKEN FROM K\NIG UND WEISE : MATHEMATISCHE GRUNDLAGEN
C DER H|HEREN GEOD{SIE UND KARTOGRAPHIE, ERSTER BAND, BERLIN 1951.
C
C PARAMETERS
C __________
C
C A,F,UTM,DM,LONGITUDE = INPUT PARAMETERS, REAL*8
C DESCRIBING THE UTM, ITM OR SB SYSTEM IN THE TRANSFORMATION.
C
C USA                  (RETURN)          COMMON ARRAY
C THE CONSTANTS NEEDED IN THE TRANSFORMATION.
C SA(1) =           NORMALIZED MERIDIAN QUADRANT  (REAL, GEOTYPE), 
C SA(2) =           EASTING AT THE CENTRAL MERIDIAN (REAL, GEOTYPE), 
C SA(3) =           LONGITUDE OF THE CENTRAL MERIDIAN (REAL, GEOTYPE), 
C SA(4)  -  SA(7) = CONST FOR ELL. GEO -> SPH. GEO (REAL)
C SA(8)  - SA(11) = CONST FOR SPH. GEO -> ELL. GEO (REAL), 
C SA(12) - SA(15) = CONST FOR SPH. N, E -> ELL. N, E (REAL), 
C SA(16) - SA(19) = CONST FOR ELL. N, E -> SPH. N, E (REAL), 
C SA(20) =          TOLER. FOR UTM INPUT, 1.5'-10 * MER QUADR. (REAL, GEOTYPE)
C SA(21) =          TOLER. FOR GEO INPUT, 0.000048 SX  (REAL, GEOTYPE), 
C SA(22) =          BOOLEAN FOR UTM/ITM, TRUE FOR UTM  (REAL), 
C                   UTG USES ONLY THE LAST BYTE AS A BOOLEAN
C THE USER MAY CHANGE SA(20) - SA(22) FOR SPECIAL CHECKS.
C 
C
C PROG: KNUD PODER, 7 NOV 1977,  
C UPDATED 18 SEP 1983;
C  F77 VERSION  ALP AUG. 1986
C
      REAL*8 N,M,L0
      REAL*8 BG(4),GB(4),GTU(4),UTGF(4)
      LOGICAL UTMF
      COMMON /UTMTRAN/USA(22)
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
C
C USA
      EQUIVALENCE (QN,USA(1)),(E0,USA(2)),(L0,USA(3)),
     .(BG(1),USA(4)),(GB(1),USA(8)),(GTU(1),USA(12)),
     .(UTGF(1),USA(16)),(UTOL,USA(20)),(GTOL,USA(21)),
     .(UTMF,USA(22))
C
C
      RD=DEGRAD     
      DG=RADDEG    
      UTMF=.FALSE.
      IF (COORSYS.EQ.4) UTMF=.TRUE.
C TEST
C      WRITE(*,*)' COORD. SYS. CONSTANTS IN UTMCON '
C      WRITE(*,*)'A= ',A
C      WRITE(*,*)'F= ',F
C      WRITE(*,*)'UTMF=',UTMF
C      WRITE(*,*)'DM= ',DM
C      WRITE(*,*)'EASTPAR=',EASTPAR
C      WRITE(*,*)'LONGITUDE=',LONGITUDE
C
COMMENT NORMALIZED MERIDIAN QUADRANT
C____________________________________
C    SEE K|NIG UND WEISE P.50 (96), P.19 (38B), P.5 (2)  
      N=F/(2.0D0-F)
      M=N**2.0D0*(1.0D0/4.0D0+N**2.0D0/64.0D0)
      W= A*(-N - DM+M*(1.0D0-DM))/(1.0D0+N)
      QN=A + W
C
COMMENT CENTRAL EASTING AND LONGITUDE  
C______________________________________
      E0=EASTPAR
      IF (UTMF) THEN
                 L0=((LONGITUDE*DG - 30.0D0)*6.0D0 - 3.0D0)*RD
      ELSE
                 L0=LONGITUDE
      ENDIF
C
COMMENT CHECK-TOL FOR TRANSFORMATION  
C_____________________________________
C 1.5 MM ON EARTH
      UTOL=0.0015D0
C SX
      GTOL=UTOL/A
C
COMMENT COEF OF TRIG SERIES  
C____________________________
C
COMMENT ELL. GEO -> SPH. GEO., KW P186 - 187 (51) - (52)  
      BG(1)=N*(-2.0D0+N*(2.0D0/3.0D0+N*(4.0D0/3.0D0   +
     .                                       N*(-82.0D0/45.0D0))))
      BG(2)=N**2.0D0*   (5.0D0/3.0D0+N*(-16.0D0/15.0D0+
     .                                       N*(-13.0D0/9.0D0)))
      BG(3)=N**3.0D0*                  (-26.0D0/15.0D0+
     .                                       N*34.0D0/21.0D0)
      BG(4)=N**4.0D0*                          (1237.0D0/630.0D0)
C
C      COMMENT SPH. GEO - ELL. GEO., KW P190 - 191 (61) - (62)  
      GB(1)=N*(2.0D0+N*(-2.0D0/3.0D0     +N*(-2.0D0+N*116.0D0/45.0D0)))
      GB(2)=N**2.0D0*(7.0D0/3.0D0+N*(-8.0D0/5.0D0+N*(-227.0D0/45.0D0)))
      GB(3)=N**3.0D0*               (56.0D0/15.0D0+N*(-136.0D0)/35.0D0)
      GB(4)=N**4.0D0*                               (4279.0D0/630.0D0)
C
COMMENT SPH. N, E -> ELL. N, E,  KW P196 (69)  
      GTU(1)=N*(1.0D0/2.0D0+N*(-2.0D0/3.0D0+
     .                            N*(5.0D0/16.0D0+N*41.0D0/180.0D0)))
      GTU(2)=N**2.0D0*(13.0D0/48.0D0+
     .                            N*(-3.0D0/5.0D0+N*557.0D0/1440.0D0))
      GTU(3)=N**3.0D0*(61.0D0/240.0D0+N*(-103.0D0/140.0D0))
      GTU(4)=N**4.0D0*                (49561.0D0/161280.0D0)
C
COMMENT ELL. N, E -> SPH. N, E,  KW P194 (65)  
      UTGF(1)=N*(-1.0D0/2.0D0+N*(2.0D0/3.0D0+
     .                           N*(-37.0D0/96.0D0+N*1.0D0/360.0D0)))
      UTGF(2)=N**2.0D0*(-1.0D0/48.0D0+
     .                           N*(-1.0D0/15.0D0+N*437.0D0/1440.0D0))
      UTGF(3)=N**3.0D0*             (-17.0D0/480.0D0+N*37.0D0/840.0D0)
      UTGF(4)=N**4.0D0*                        (-4397.0D0/161280.0D0)
C
C TEST
C        WRITE(*,*)' SA EFTER UTMCON'
C        WRITE(*,*)' QN=      ',QN
C        WRITE(*,*)' E0=      ',E0
C        WRITE(*,*)' L0=      ',L0
C        WRITE(*,*)' BG=      ',(BG(K),K=1,4)
C        WRITE(*,*)' GB=      ',(GB(K),K=1,4)
C        WRITE(*,*)' GTU=     ',(GTU(K),K=1,4)
C        WRITE(*,*)' UTGF=    ',(UTGF(K),K=1,4)
C        WRITE(*,*)' UTOL=    ',UTOL
C        WRITE(*,*)' GTOL=    ',GTOL
C        WRITE(*,*)' UTMF=    ',UTMF
C
      RETURN
      END
C
C
      SUBROUTINE UTG(N, E, B, L, DIRECT)
C     ----------------------------------
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8         N, E, B, L
      LOGICAL                    DIRECT
C
      REAL*8 NP,LG,L0,NDIF,NCHECK,LONGITUDE
      REAL*8 BG(4),GB(4),GTU(4),UTGF(4)
      LOGICAL UTMF
C
      COMMON /UTMTRAN/USA(22)
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
C
C USA
      EQUIVALENCE (QN,USA(1)),(E0,USA(2)),(L0,USA(3)),
     .(BG(1),USA(4)),(GB(1),USA(8)),(GTU(1),USA(12)),
     .(UTGF(1),USA(16)),(UTOL,USA(20)),(GTOL,USA(21)),
     .(UTMF,USA(22))
C
COMMENT  
C
C FUNCTION AND PARAMETERS
C _______________________
C U_T_G          
C DUAL AUTOCHECKING TRANSFORMATION PROCEDURE FOR TRANSFORMATION
C BETWEEN GEOGRAPHICAL COORDINATES AND TRANSVERSAL MERCATOR CO-
C ORDINATES. THE PROCEDURE TRANSFORMS UTM->GEO WHEN DIRECT IS
C TRUE AND THE REVERSE WHEN DIRECT IS FALSE.
C AN ALARM IS PRODUCED WHEN THE CHECK BY THE INVERSE TRANSFORMA-
C TION EXCEEDS THE TOLERANCE OF 1.2 MM OR AN OTHER VALUE SET BY
C THE USER IN SA(19) FOR UTM->GEO OR SA(20) FOR GEO->UTM.
C
C THE VALUE OF THE PROCEDURE IS THE TRANSFORMED N OR LATITUDE
C IN GEOTYPE UNITS
C 
C N, E              (CALL)             REAL
C THE UTM- OR GEOGRAPHICAL COORDINATES INPUT FOR TRANS-
C FORMATION IN GEOTYPE UNITS.
C 
C B, L              (RETURN)           REAL
C THE GEOGRAPHICAL OR UTM-COORDINATES OUTPUT FROM THE PROCEDURE
C AS TRANSFORMED AND CHECKED COORDINATES IN GEOTYPE UNITS
C 
C USA                (CALL)             COMMON ARRAY
C TRANSFORMATION CONSTANTS FOR DIRECT AND INVERSE TRANSF.  
C 
C DIRECT            (CALL)             LOGICAL
C DIRECT = TRUE => TRANSFORMATION UTM, ITM, SB -> GEOGR.
C DIRECT = FALSE => TRANSFORMATION GEOGR -> UTM, ITM, SB
C
C PROG: KNUD PODER 4 NOV 1977
C FORTRAN77 ALP AUG. 86
C
C
C TEST
C      WRITE(*,*)' SA I UTG'
C      WRITE(*,*)' QN=     ',QN
C      WRITE(*,*)' E0=     ',E0
C      WRITE(*,*)' L0=     ',L0
C      WRITE(*,*)' UTMF   ',UTMF
C      WRITE(*,*)' BG=',(BG(K),K=1,4)
C      WRITE(*,*)' GB=',(GB(K),K=1,4)
C      WRITE(*,*)' GTU=',(GTU(K),K=1,4)
C      WRITE(*,*)' UTGF=',(UTGF(K),K=1,4)
C      WRITE(*,*)' UTOL=      ',UTOL
C      WRITE(*,*)' GTOL=      ',GTOL
C
C     TRANSFORMATION SEQUENCE
      I=3
      IF (DIRECT) I=1
      IH=4 - I
      IS=2 - I
C
COMMENT CHECK-VALUES
C___________________
      NCHECK=N
      ECHECK=E
C
C
COMMENT TRANSFORMATION CASES
C___________________________
      DO 100 I=I,IH,IS
      GOTO (10,20,30) I
C
COMMENT CASE 1, UTM,ITM -> GEO
C_____________________________
   10 CONTINUE
COMMENT NORMALIZE N, E
C_____________________
      IF (UTMF.AND.N.GT.10 000 000.0D0) 
     .                N = N - 20 000 000.0D0
      NP      = N/QN
      EP      = (E - E0)/QN
C TEST
C      WRITE(*,*)' N,NP,EP',N,NP,EP
C
COMMENT ELLIP. N, E -> SPH. N, E
C_______________________________
      NP = NP + CLENCSIN(UTGF, 4, 2.0D0*NP, 2.0D0*EP, DN, DE)
      EP = EP + DE
C
COMMENT SPH. N, E = COMPL. SPH. LAT -> SPH LAT, LNG
C___________________________________________________
      COSBN = DCOS(NP)
      LG   = DATAN2(DSINH(EP),COSBN)
      BBG  = DATAN2(DSIN(NP)*DCOS(LG),COSBN)
C
COMMENT SPH. LAT, LNG -> ELL. LAT, LNG
C______________________________________
      BBG = BBG + CLENSIN(GB, 4, 2.0D0*BBG)
      LG = LG + L0
      GOTO 100
C    END CASE 1 
C
C
COMMENT CASE 2, TRANSF RESULTS
C_____________________________
   20 CONTINUE
      B     = BBG
      N     = BBG  
      L     = LG
      E     = LG
      GOTO 100
C    END CASE 2
C
COMMENT CASE 3, GEO -> UTM, ITM
C_______________________________
   30 CONTINUE
C NB NB NB: B,L REFERS TO NORTHING AND EASTING,
C           N,E REFERS TO LATITUDE AND LONGITUDE
C
COMMENT ELL. LAT, LNG -> SPH. LAT, LNG
C______________________________________
      BBG    = N + CLENSIN(BG, 4, 2.0D0*N)
      LG    = E - L0
C
COMMENT SPH. LAT, LNG -> COMPL. SPH. LAT = SPH N, E
C__________________________________________________
      COSBN =DCOS(BBG)
      NP    = DATAN2(DSIN(BBG),DCOS(LG)*COSBN)
      EP    = ARCTANH(DSIN(LG)*COSBN)
C
COMMENT SPH. NORMALIZED N, E -> ELL. N, E
C_______________________________________
      NP = NP + CLENCSIN(GTU, 4, 2.0D0*NP, 2.0D0*EP, DN, DE)
      EP = EP + DE
      BBG = QN*NP
      LG = QN*EP + E0
      IF (UTMF.AND.N.LT.0.0D0) BBG=BBG + 20 000 000.0D0
C END CASE 3
  100 CONTINUE
C
C
C
COMMENT IN/REV-DIF FOR CHECK
C____________________________
      NDIF  = BBG - NCHECK
      EDIF  = LG - ECHECK
      EDCOS = EDIF
      IF(.NOT.DIRECT) EDCOS = EDCOS*DCOS(NCHECK)
C
COMMENT ERROR ACTIONS
C___________________
      IF (DIRECT) THEN 
                       TOL=UTOL
      ELSE
                       TOL=GTOL
      END IF
      IF (DABS(NDIF).LT.TOL) GOTO 98
         WRITE(*,*) 'UTG TOLERANCE ERROR'
         WRITE(*,*) 'N DIFFERENCE,TOLERANCE ',NDIF,TOL
  98  CONTINUE
      IF (DABS(EDCOS).LT.TOL) RETURN
         WRITE(*,*)'UTG TOLERANCE ERROR'
         WRITE(*,*)EDCOS,TOL
      RETURN
      END
C
C
      SUBROUTINE LMBCON(A,F,CELAT1,CELAT2,COORSYS,
     .                  LONGITUDE,SCALEDEV,EASTPAR,BPAR)
C     -----------------
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8   LONGITUDE
      INTEGER*2 REGION,COORSYS
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
C
C SUBROUTINE   SET LAMBERT CONSTANT
C ---------------------------------
C A,F,REGION,COORSYS,LONGITUDE,SCALEDEV,EASTPAR INPUT PARAMETERS  REAL*8
C DESCRIBE THE COORDINATE SYSTEM
C REGION OG COORSYS BRUGES ENDNU IKKE (KUN DANMARK IMPLEMENTERET)
C
C LMBSA            (RETURN)           COMMON ARRAY
C AT RETURN LMBSA WILL HAVE THE FOLLOWING CONTENTS:
C   P0       LMBSA(1)
C   C0       LMBSA(2)
C   B0       LMBSA(3)          CENTRAL LATITUDE
C   L0       LMBSA(4)          CENTRAL LONGITUDE
C   Y0       LMBSA(5)
C   X0       LMBSA(6)
C   ECC      LMBSA(7)          ECCENTRICITETEN
C   SINBC    LMBSA(8)
C   LTOL     LMBSA(9)
C   GTOL     LMBSA(10)
C
C
C
      REAL*8 LMBSA,LTOL,L0,N2
C
      COMMON /LAMBERT/LMBSA(10)
      EQUIVALENCE (P0,LMBSA(1)),(C0,LMBSA(2)),(B0,LMBSA(3)),
     .  (L0,LMBSA(4)),(Y0,LMBSA(5)),(X0,LMBSA(6)),
     .  (ECC,LMBSA(7)),(SINBC,LMBSA(8)),
     .  (LTOL,LMBSA(9)),(GTOL,LMBSA(10))
C
C TEST
C      WRITE(*,*)' COORD. SYS. CONSTANTS IN LMBCON '
C      WRITE(*,*)'A= ',A
C      WRITE(*,*)'F= ',F
C      WRITE(*,*)'REGION=',REGION
C      WRITE(*,*)'COORSYS= ',COORSYS
C      WRITE(*,*)'LONGITUDE=',LONGITUDE
C      WRITE(*,*)'SCALEDEV=',SCALEDEV
C      WRITE(*,*)'EASTPAR=',EASTPAR
C
C
      PIQ=PI4 
      RD=DEGRAD     
C
C SET TRANSFORMATION TOLERANCES
C 2 MM ON EARTH
      LTOL = 0.0015D0
C .0000 65 SX ON EARTH
      GTOL = LTOL/A
C
      L0 = LONGITUDE
C CENTRAL LATITUDE
C     B0 = CELAT*RD
C     CENTRAL LATITUDE IS BEING CALCULATED BY 
C     RICHARDUS/ADLER P.93 (5.93) IN THE SUBROUTINE CALCLAM
C 
C   E2=1. ECCENTRICITET
      E2 = F*(2-F)
      ECC= DSQRT(E2)
      EH=ECC/2.0D0 
      CALL CALCLAM(B0,CELAT1,CELAT2,ECC,A,C0) 
C ERROR CORRECTED 1997-07-16 BY CCT.
C     CALL CALCLAM(B0,CELAT1,CELAT2,ECC,A,C0,P00) 

C ELLIPSOID PARAMS
      SINBC = DSIN(B0)
C NEXT TWO LINES COMMENTED OUT, 1990.12.08 BY CCT. 
C     COSBC = DCOS(B0)
C     T = SINBC/COSBC
      PH = PIQ-B0/2.0D0  
      ESINB=ECC*SINBC 
      C0= C0*(1.0D0-SCALEDEV) 
      P0=C0*(DSIN(PH)/DCOS(PH)*((1+ESINB)/(1-ESINB))**EH)**SINBC 
C
      BPARR=BPAR*RD
C     BPARR=B0
      TAN1=DTAN(PIQ-BPARR/2.0D0)
      ESIN1=ECC*DSIN(BPARR) 
      P1 = C0* (TAN1*((1+ESIN1)/(1-ESIN1))**EH)**SINBC
      WRITE(*,*)'   P1   ',P1
      WRITE(*,*)'   P0   ',P0
      P0=P1 
C
      WRITE(*,*)'BPAR R  ',BPAR,BPARR
          Y0 =  0.0D0
          X0 =  0.0D0
C TEST
C        WRITE(*,*)' SA EFTER LMBCON'
C        WRITE(*,*)' P0=      ',P0
C        WRITE(*,*)' C0=      ',C0
C        WRITE(*,*)' B0=      ',B0
C        WRITE(*,*)' L0=      ',L0
C        WRITE(*,*)' Y0=      ',Y0
C        WRITE(*,*)' X0=      ',X0
C        WRITE(*,*)' ECC=     ',ECC
C        WRITE(*,*)' SINBC=   ',SINBC
C        WRITE(*,*)' LTOL=    ',LTOL
C        WRITE(*,*)' GTOL=    ',GTOL
C
      RETURN
      END
C
C
      SUBROUTINE LTG(Y, X, B, L, DIRECT)
C     -------------------------------------
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8        Y, X, B, L
      LOGICAL       DIRECT
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
C
C
C  SUBROUTINE LTG
C  --------------
C  FUNCTION AND PARAMETERS
C  -----------------------
C  LTG
C  DUAL AUTOCHECKING TRANSFORMATION PROCEDURE FOR TRANSFORMATION
C  BETWEEN GEOGRAPHICAL COORDINATES AND LAMBERT CONICAL COORDINATES.
C  THE PROCEDURE TRANSFORMS LMB->GEO WHEN DIRECT IS TRUE AND
C  THE REVERSE WHEN DIRECT IS FALSE.
C  AN ALARM IS PRODUCED WHEN THE CHECK BY THE INVERSE TRANSFORMA-
C  TION EXCEEDS THE TOLERANCE OF 2.0 MM OR AN OTHER VALUE SET BY
C  THE USER IN SA(17) FOR LMB->GEO OR SA(18) FOR GEO->LMB.
C
C
C  Y, X              (CALL)             REAL*8
C  THE LMB- OR GEOGRAPHICAL COORDINATES INPUT FOR TRANS-
C  FORMATION IN GEOTYPE UNITS.
C
C  B, L              (RETURN)           REAL*8
C  THE GEOGRAPHICAL OR LMB-COORDINATES OUTPUT FROM THE PROCEDURE
C  AS TRANSFORMED AND CHECKED COORDINATES IN GEOTYPE UNITS
C
C  LMBSA                (CALL)             COMMON ARRAY
C  TRANSFORMATION CONSTANTS FOR DIRECT AND INVERSE TRANSF.  
C  P0      LMBSA(1)
C  C0      LMBSA(2)
C  B0      LMBSA(3)           CENTRAL LATITUDE
C  L0      LMBSA(4)           CENTRAL LONGITUDE
C  Y0      LMBSA(5)
C  X0      LMBSA(6)
C  ECC     LMBSA(7)           ECCENTRICITETEN
C  SINBC   LMBSA(8)
C  LTOL    LMBSA(9)
C  GTOL    LMBSA(10)
C  
C  DIRECT            (CALL)             LOGICAL
C  DIRECT = TRUE => TRANSFORMATION LMB -> GEOGR.
C  DIRECT = FALSE => TRANSFORMATION GEOGR -> LMB
C
C  PROG: KNUD PODER 25 MAY 1981
C  F77  ANNETTE LUND PEDERSEN 1987
C
C
      REAL*8 LMBSA,LTOL,L0
      REAL*8                L1, LAT, LNG, LDIF, LDCS
C
      COMMON /LAMBERT/LMBSA(10)
      EQUIVALENCE (P0,LMBSA(1)),(C0,LMBSA(2)),(B0,LMBSA(3)),
     .  (L0,LMBSA(4)),(Y0,LMBSA(5)),(X0,LMBSA(6)),
     .  (ECC,LMBSA(7)),(SINBC,LMBSA(8)),
     .  (LTOL,LMBSA(9)),(GTOL,LMBSA(10))
C
C TEST
C       WRITE(*,*)' LMBSA I LTG'
C       WRITE(*,*)' P0=     ',P0
C       WRITE(*,*)' C0=     ',C0
C       WRITE(*,*)' B0=     ',B0
C       WRITE(*,*)' L0=     ',L0
C       WRITE(*,*)' Y0=     ',Y0
C       WRITE(*,*)' X0=     ',X0
C       WRITE(*,*)' ECC=    ',ECC
C       WRITE(*,*)' SINBC=  ',SINBC
C       WRITE(*,*)' LTOL=      ',LTOL
C       WRITE(*,*)' GTOL=      ',GTOL
C
COMMENT SET MODE
C
      I = 3
      IF (DIRECT) I=1
      IH = 4 - I
      IS = 2 - I
      YCHECK = Y
      XCHECK = X
      EH=ECC/2
C
C
      DO 10 I = I,IH,IS
      GOTO (1,2,3)I
C
C CASE 1, LMB -> GEO
 1    CONTINUE
C     WRITE(*,*)'CASE 1 '
      Y1 = Y - Y0
      X1 = X - X0
      G   = DATAN(-X1/(P0 - Y1))
C NEXT TWO LINES COMMENTED OUT 1990.12.08 BY CCT.  
C     G2=G/2
C     DP  = (2*DSIN(G2)**2 - Y1/P0)/DCOS(G)
C
COMMENT DIRECT EVALUATION
C
       POL = ((P0 - Y1)/DCOS(G)/C0)**(1/SINBC)
       ESINB = ECC*SINBC
       PH1 = (PI/2 - B0)/2
C       WRITE(*,*)'START PH ',PH1
  12     CONTINUE
         PH = DATAN(POL*((1.0D0 - ESINB)/(1.0D0 + ESINB))**EH)
C       WRITE(*,*)'PH,TOL ',PH,1E-10*DABS(PH)
         IF (DABS(PH-PH1).LE.1E-10*DABS(PH)) GOTO 14
         PH1 = PH
         ESINB = ECC*DCOS(2*PH)
         GOTO 12
 14    W = PI/2 - 2*PH
C
      B1 = W
      L1 = G/SINBC + L0
C
      GOTO 10
C END CASE 1
C
C CASE 2, TRANSF. RESULTS
C
 2    CONTINUE
C      WRITE(*,*)'CASE 2'
      B     = B1
      Y     = B1
      L     = L1
      X     = L1
      GOTO 10
C END CASE 2
C
C CASE 3, GEO -> LMB
C
C   Y IS LAT
C   X IS LNG
C   B1 IS Y-COORD
C   L1 IS X-COORD
C
 3    CONTINUE
C      WRITE(*,*)'CASE 3'
C     LAT = Y - B0
      LNG = X - L0
      G   = -LNG*SINBC
C
COMMENT DIRECT EVALUATION
C
        PH= (PI/2 - Y)/2
        ESINB = ECC*DSIN(Y)
        POL = C0*(DSIN(PH)/DCOS(PH)*((1+ESINB)/(1-ESINB))**EH)**SINBC
        B1=P0 - POL*DCOS(G) + Y0
        L1=POL*DSIN(G) + X0
C END CASE 3
 10   CONTINUE
C
C
C
C TEST AND ERROR ACTIONS
      BDIF = B1 - YCHECK
      LDIF = L1 - XCHECK
      IF (DIRECT) THEN
        TOL = LTOL
        LDCS=LDIF
      ELSE
        TOL = GTOL
        LDCS = LDIF*DCOS(YCHECK)
      ENDIF
C
      IF (DABS(BDIF).GT.TOL.OR.DABS(LDCS).GT.TOL) THEN
        IF (DIRECT) THEN
          WRITE(*,*)' TOLERANCE FEJL LMB -> GEO' 
        ELSE
          WRITE(*,*)' TOLERANCE FEJL GEO -> LMB'
        ENDIF
      ENDIF
      RETURN
      END
C
C
      REAL*8 FUNCTION ARCTANH(X)
C     --------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8                 X
C THE FUNCTION COMPUTES THE INVERSE OF THE FUNCTION TAN_H
      IF (DABS(X).LT.0.95D0) THEN
        ARCTANH=DLOG((1.0D0+X) / (1.0D0 - X)) / 2.0D0
      ELSE
        WRITE(*,*)'D38'
        ARCTANH=1.0D38
      END IF
      RETURN
      END
C
C
C
C
C     REAL FUNCTION CLENSIN(A, G, ARG)
      DOUBLE PRECISION FUNCTION CLENSIN(A, G, ARG)
C     --------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8                A(*)
      INTEGER                   G
C
COMMENT
C
C CLENSIN         
COMPUTES THE SUM OF A SERIES OF A(I)*SIN(I*ARG) BY CLENSHAW
C SUMMATION FROM G DOWN TO 1.
C THE SUM IS THE VALUE OF THE PROCEDURE.
C THE PROCEDURE FINDS THE ELEMENTS OF AN ARRAY H
C SO THAT H(I) := A(I) + 2*COS(ARG)*H(I+1) - H(I+2)
C WITH H(G+1) = H(G+2) = 0.
C THEN H(1)*SIN(ARG) BECOMES THE SUM OF THE SERIES.
C
C A                (CALL)                  ARRAY
C THE COEFFICIENTS OF THE SERIES TO BE SUMMED DECLARED
C AS A(1:G) AT LEAST.
C 
C G               (VALUE CALL)            INTEGER
C THE NUMBER OF COEFFICIENTS IN THE SERIES.
C 
C ARG              (VALUE CALL)            REAL
C THE ARGUMENT OF SINE IN THE SERIES IN RADIANS.
C 
C PROG.: KNUD PODER 1978
C FORTRAN77 ALP 1986
C
C  ARGUMENT
      COSARG = 2.0D0*DCOS(ARG)
C
C  FIRST TERM
      HR1 = 0.0D0
      HR  = A(G)
C
C  SUMMATION LOOP
      DO 10 IT = G - 1,1,-1
C   PASS H COEFFICIENTS
      HR2 = HR1  
      HR1 = HR  
C   NEXT H COEFFICIENT
      HR = -HR2 + COSARG*HR1 + A(IT)  
   10 CONTINUE  
C
C  SUM OF THE SERIES
      CLENSIN = HR*DSIN(ARG)
C
      RETURN
      END
C
C
C     REAL FUNCTION CLENCSIN(A, G, ARGR, ARGI, R, I)  
      DOUBLE PRECISION FUNCTION CLENCSIN(A, G, ARGR, ARGI, R, I)  
C     ----------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8                 A(*)
      REAL*8                                     R,I
      INTEGER G
C
C CLENCSIN         (CALL AND RETURN)     REAL FUNCTION
C COMPUTES THE SUM OF A SERIES A(I)*SIN(I*ARG_R + J*I*ARG_I)
C (WHERE J IS THE IMAGINARY UNIT) BY CLENSHAW SUMMATION
C FROM G DOWN TO 1. THE COEFFICIENTS ARE HERE REAL AND
C THE ARGUMENT OF SIN IS COMPLEX. THE REAL PART OF THE
C SUM IS THE VALUE OF THE PROCEDURE.
C THE PROCEDURE FINDS IN COMPLEX ARITHMETIC AN ARRAY H
C SO THAT H(I) := A(I) + 2*COS(ARG_R+J*ARG_I)*H(I+1) - H(I+2)
C WITH H(G+1) = H(G+2) = 0.
C THEN H(1)*SIN(ARG_R+J*ARG_I) BECOMES THE SUM OF THE SERIES.
C
C A                 (CALL)                 ARRAY
C THE COEFFICINENT OF THE SERIES TO BE SUMMED DECLARED 
C AS A(1:G) AT LEAST.
C
C G                 (VALUE CALL)           INTEGER
C THE NUMBER OF COEFFICIENTS IN THE SERIES.
C
C ARG_R, ARG_I     (VALUE CALL)            REAL
C THE REAL AND IMAGINARY PART OF THE ARGUMENT OF SINE IN 
C 
C R, I               (RETURN)              REAL
C THE REAL AND IMAGINARY PART OF THE SUM.
C 
C PROG.: KNUD PODER 1978
C FORTRAN77 ALP 1986
C 
C
      REAL*8 II
C
C  <*ARGUMENTS*>
      SINARGR  =DSIN(ARGR)  
      COSARGR  =DCOS(ARGR)  
      SINHARGI =DSINH(ARGI)  
      COSHARGI =DCOSH(ARGI)  
      RR         = 2.0D0*COSARGR*COSHARGI  
      II         = -2.0D0*SINARGR*SINHARGI  
C
C  <*FIRST COMPLEX TERM*>
      HR1 = 0.0D0
      HI1 = 0.0D0
      HI  = 0.0D0
      HR  = A(G)  
C
      DO 10 IT = G - 1,1,-1
      HR2 = HR1  
      HR1 = HR  
      HI2 = HI1  
      HI1 = HI  
      HR  = -HR2 + RR*HR1 - II*HI1 + A(IT)  
      HI  = -HI2 + II*HR1 + RR*HI1  
   10 CONTINUE
C  <*FINAL TERM*>
      RR = SINARGR*COSHARGI  
      II = COSARGR*SINHARGI  
C
C  <*SUM OF THE SERIES*>
      R         =RR*HR - II*HI  
      CLENCSIN = R
      I         = RR*HI + II*HR  
C
      RETURN
      END 
C 
      SUBROUTINE UTS34P(N, E, Y, X, LANDSDEL, DIRECT)
C     -----------------------------------------------
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
      REAL*8  N
      LOGICAL DIRECT
C
C N,E                  (CALL PARAMETERS)       REAL*8
C UTM OR S34 COORDINATES INPUT FOR TRANSFORMATION.
C
C Y, X                 (RETURN PARAMETERS)     REAL*8
C S34 OR UTM COORDINATES OUTPUT AFTER TRANSFORMATION.
C
C LANDSDEL             (CALL PARAMETER)        INTEGER
C CONTROL OF THE ASSUMED COORDINATE SYSTEMS. FOR 
C LANDSDEL = 1 (JYLLAND) OR LANDSDEL = 2 (SJ[LLAND)
C UTM ZONE 32 IS ASSUMED AND FOR LANDSDEL = 3
C (BORNHOLN) UTM 33 IS ASSUMED. IF OTHER UTM ZONE, 
C AS E.GG. UTM 33 FOR SJ{LLAND IS USED, TR_Z_T_Z
C MAY BE USED FOR TRANSFORMING TO/FROM UTM 32.
C
C DIRECT             (CALL PARAMETER)          LOGICAL
C CONTROL OF THE DIRECTION OF TRANSFORMATION.
C DIRECT = TRUE PRODUCES TRANSFORMATION FROM UTM TO S34 AND
C DIRECT = FALSE PRODUCES THE INVERSE TRANSFORMATION.
C
C
      REAL*8 NIN, NN,TOL
      REAL*8 R(8),IC(8)
C TEST
C      WRITE(*,*)'INDDATA:'
C      WRITE(*,*)'N= ',N
C      WRITE(*,*)'E= ',E
C
      IF (LANDSDEL.LT.1.OR.LANDSDEL.GT.3) THEN
        WRITE(*,*) 'ILLEGAL LANDSDEL'
        RETURN
      ENDIF
C
COMMENT CHECK VALUES
      NIN = N
      EIN = E
C  1.5 MM
      TOL  = 0.0015D0
C
C
C TRANSFORMATION SEQUENCE
      I = 3
      IF (DIRECT) I=1
      IH = 4 - I
      IS = 2 - I
C
COMMENT TRANSFORMATION CASES
      DO 100 I=I,IH,IS
      GOTO (10,20,30)I
C
C CASE 1, UTM -> S34
C ------------------
  10  CONTINUE
      NN = 0.0D0
      EE = 0.0D0
      IF (LANDSDEL.EQ.1) THEN
COMMENT CASE 1, JYLLAND
C        WRITE(*,*)' UTM TIL S34, JYLLAND'
        DN = NIN -6 231 000.0D0
        DE = EIN -  530 000.0D0
C
C UTM32 -> S34J, REALPARTS OF COEFFICIENTS
        R(1) = +1.993 711 4647D+05
        R(2) = +1.000 136 5021D+00
        R(3) = -1.648 605 3260D-11
        R(4) = -1.887 742 1278D-17
C
C UTM32 -> S34J, IMAGPARTS OF COEFFICIENTS
        IC(1) = -2.653 817 2775D+05
        IC(2) = +1.999 552 0454D-02
        IC(3) = +3.445 286 2838D-10
        IC(4) = -9.674 079 2784D-17
C
        DO 12 IT=4,1,-1
C REAL PART
          Z = DN*NN - DE*EE +R(IT)
C IMAG. PART
          EE = DN*EE + DE*NN + IC(IT)
          NN = Z
   12     CONTINUE
C
        NIN =  NN
        EIN = -EE
      ENDIF
C
      IF (LANDSDEL.EQ.2) THEN
COMMENT CASE 2, SJ{LLAND
C        WRITE(*,*)' UTM TIL S34, SJ{LLAND'
        DN =  NIN -6 131 000.0D0
        DE =  EIN -  678 000.0D0
C
C UTM32 -> S34S, REALPART
        R(1) = +9.643 219 0004D+04
        R(2) = +9.998 007 4884D-01
        R(3) = -7.207 782 0180D-12
        R(4) = +6.251 085 4612D-17
C
C UTM32 -> S34S, IMAGPART
        IC(1) = -1.193 532 2229D+05
        IC(2) = +1.955 584 9611D-02
        IC(3) = +2.167 520 9626D-09
        IC(4) = -2.521 500 2720D-16
C
        DO 14 IT=4,1,-1
C REAL PART
        Z = DN*NN - DE*EE +R(IT)
C IMAG. PART
        EE = DN*EE + DE*NN + IC(IT)
        NN = Z
   14   CONTINUE
C
        NIN =  NN
        EIN = -EE
      ENDIF
C
      IF (LANDSDEL.EQ.3) THEN
COMMENT CASE 3, BORNHOLM
C        WRITE(*,*)' UTM TIL S34, BORNHOLM'
        DN = NIN - 6 100 000.0D0
        DE = EIN -   500 000.0D0
C
C UTM33 -> S45B, REAL PART
        R(1) = +4.257 993 4018D+04
        R(2) = +1.000 405 3319D+00
        R(3) = -7.703 929 4168D-11
        R(4) = +4.746 039 1692D-15
        R(5) = +1.825 997 5589D-18
        R(6) = -2.072 795 9960D-22
        R(7) = +7.025 727 3976D-27
        R(8) = -8.052 995 7628D-32
C
C UTM33 -> S45B, IMAG PART
        IC(1) = -4.299 354 7686D+04
        IC(2) = -1.464 391 5438D-03
        IC(3) = -4.789 833 8026D-10
        IC(4) = +3.743 207 7762D-14
        IC(5) = -4.889 968 6702D-18
        IC(6) = +2.054 030 0545D-22
        IC(7) = -2.942 101 1013D-27
        IC(8) = +1.538 757 7766D-33
C
        DO 16 IT=8,1,-1
C REAL PART
        Z = DN*NN - DE*EE +R(IT)
C IMAG. PART
        EE = DN*EE + DE*NN + IC(IT)
        NN = Z
   16   CONTINUE
C
        NIN =  NN
        EIN = -EE
C
      TOL =  -1.0D0
      IF (DABS(NN-R(1)).LT.3D4.AND.DABS(EE-IC(1)).LT.3D4)
     .                          TOL = 3*0.0015D0
      ENDIF
C
C END LANDSDEL CASES
      GOTO 100
C
C CASE 2, OUTPUT OF RESULTS
C -------------------------
   20 CONTINUE
      Y = NIN
      X = EIN
      GOTO 100
C END CASE 2
C
C CASE 3, S34 -> UTM
C ------------------
   30 CONTINUE
      NN = 0.0D0
      EE = 0.0D0
      IF (LANDSDEL.EQ.1) THEN
COMMENT CASE 1, JYLLAND
C        WRITE(*,*)' S34 TIL UTM, JYLLAND'
        DN =   NIN -  200 000.0D0
        DE = -(EIN -  200 000.0D0)
C
C S34J -> UTM32, REALPART
        R(1) = +6.232 935 0512D+06
        R(2) = +9.995 087 0832D-01
        R(3) = -2.273 246 9700D-11
        R(4) = +2.626 469 1305D-17
C S34J -> UTM32, IMAGPART
        IC(1) = +5.953 355 8288D+05
        IC(2) = -1.998 426 5541D-02
        IC(3) = -3.392 190 5837D-10
        IC(4) = +9.481 055 0416D-17
C
        DO 32 IT=4,1,-1
C REAL PART
        Z = DN*NN - DE*EE +R(IT)
C IMAG. PART
        EE = DN*EE + DE*NN + IC(IT)
        NN = Z
   32   CONTINUE
C
        NIN = NN
        EIN = EE
      ENDIF
C
      IF (LANDSDEL.EQ.2) THEN
COMMENT CASE 2, SJ{LLAND
C        WRITE(*,*)' S34 TIL UTM, SJ{LLAND'
        DN =   NIN -  200 000.0D0
        DE = -(EIN -  200 000.0D0)
C
C S34S -> UTM32, REALPART
        R(1) = +6.232 935 6122D+06
        R(2) = +9.994 550 8220D-01
        R(3) = -7.389 759 7436D-11
        R(4) = -5.208 030 8192D-17
C
C S34S -> UTM32, IMAGPART
        IC(1) = +5.953 353 4820D+05
        IC(2) = -1.997 925 1874D-02
        IC(3) = -2.071 794 6709D-09
        IC(4) = +2.570 378 1294D-16
C
        DO 34 IT=4,1,-1
C REAL PART
        Z = DN*NN - DE*EE +R(IT)
C IMAG. PART
        EE = DN*EE + DE*NN + IC(IT)
        NN = Z
   34   CONTINUE
C
        NIN = NN
        EIN = EE
      ENDIF
C
      IF (LANDSDEL.EQ.3) THEN
COMMENT CASE 3, BORNHOLM
C        WRITE(*,*)' S34 TIL UTM, BORNHOLM'
        DN =   NIN - 50 000.0D0
        DE = -(EIN - 50 000.0D0)
C
C S45B -> UTM33, REAL PART
        R(1) = +6.107 427 3382D+06
        R(2) = +9.995 996 8336D-01
        R(3) = +1.207 295 7024D-10
        R(4) = -9.459 344 9880D-15
        R(5) = +6.599 486 4072D-19
        R(6) = +2.441 046 6467D-23
        R(7) = -2.894 662 9725D-27
        R(8) = +8.028 219 5772D-32
C S45B -> UTM33, IMAG PART
        IC(1) = +4.930 072 5696D+05
        IC(2) = +1.468 676 2273D-03
        IC(3) = +5.490 597 3626D-10
        IC(4) = +2.151 083 3240D-15
        IC(5) = -1.016 347 7904D-18
        IC(6) = +4.472 658 3308D-23
        IC(7) = -1.106 696 6998D-27
        IC(8) = -5.865 810 8998D-34
C
       DO 36 IT=8,1,-1
C REAL PART
        Z = DN*NN - DE*EE +R(IT)
C IMAG. PART
        EE = DN*EE + DE*NN + IC(IT)
        NN = Z
   36   CONTINUE
C
        NIN = NN
        EIN = EE
C SET TOLERANCE CHECK HER???
      TOL =  -1.0D0
      IF (DABS(DN).LT.3D4.AND.DABS(DE).LT.3D4) TOL = 3*0.0015D0
C
      ENDIF
C     GOTO 100
C END CASE 3, S34 -> UTM
  100 CONTINUE
C
C TOL-CHECK OF RESULTS
C ---------------------
      IF (DABS(N - NIN).GT.TOL.OR.DABS(E - EIN).GT.TOL) THEN
       IF (DIRECT) THEN 
        WRITE(*,*)'TOL FEJL UTM->S34, DIFFERENCE,TOL ',N-NIN,E-EIN,TOL
       ELSE 
        WRITE(*,*)'TOL FEJL S34->UTM, DIFFERENCE,TOL',N-NIN,E-EIN,TOL
       ENDIF
      ENDIF
C
      RETURN
      END
C
C
      SUBROUTINE UTS34(N, E, Y, X, SA, LANDSDEL, DIRECT)
C ------------------------------------------------------
C /* COPYRIGHT (C) 1989 KMS, KORT OG MATRIKELSTYRELSEN, DENMARK */
C /* ALL RIGHTS RESERVED.                                       */
C /* THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF G/S, KORT - */
C /* OG MATRIKELSTYRELSEN, DENMARK. THIS COPYRIGHT CLAIM DOES   */
C /* INDICATE AN INTENTION OF PUBLISHING THIS CODE.             */ 
C
C     ----------------------------------
      REAL*8           N, E, Y, X
      REAL*8                       SA(*)
      LOGICAL                                    DIRECT
C
C UTS34                                SUBROUTINE
C THE N-GOING COORDINATE OF EITHER UTM OR S34, AS DETERMINED BY
C THE VALUE OF DIRECT.
C 
C N, E                  (CALL)                  REAL*8
C UTM OR S34 COORDINATES INPUT FOR TRANSFORMATION.
C 
C Y, X                 (RETURN)                 REAL*8
C S34 OR UTM COORDINATES OUTPUT AFTER TRANSFORMATION.
C 
C SA                   (CALL AND RETURN)        ARRAY
C SIZE MIN 1:170. HOWEVER ALARM IS PRODUCED WHEN INSUFFICIENT.
C HOLDS TABLE OF TRIANGLES OF INTERPOLATION AND SYSTE-
C MATIC DIFFERENCES S34 AND UTM, INITIALIZED AUTOMATICALLY AT
C AT FIRST CALL OF S34_COR. HOWEVER, IF SEVERAL CALLS OF
C U_T_S34 ARE EXECUTED WITH DIFFERENT SA-ARRAYS, EACH ARRAY
C SHOULD BE INITIALIZED DIRECTLY BY AN EXPLICIT CALL OF
C SET_S34_. FOR LANDSDEL 3 (BORNHOLM) 
C SA IS NOT USED AND A DUMMY ARRAY IS ALLOWED.
C 
C LANDSDEL             (CALL)                INTEGER
C CONTROL OF THE ASSUMED COORDINATE SYSTEMS. FOR 
C LANDSDEL = 1 (JYLLAND) OR LANDSDEL = 2 (SJ[LLAND)
C UTM ZONE 32 IS ASSUMED AND FOR LANDSDEL = 3
C (BORNHOLN) UTM 33 IS ASSUMED. IF OTHER UTM ZONE, 
C AS E.GG. UTM 33 FOR SJ{LLAND IS USED, TR_Z_T_Z
C MAY BE USED FOR TRANSFORMING TO/FROM UTM 32.
C 
C DIRECT             (CALL)            LOGICAL
C CONTROL OF THE DIRECTION OF TRANSFORMATION. DIRECT = TRUE
C PROCUCES TRANSFORMATION FROM UTM TO S34 AND
C DIRECT = FALSE PRODUCES THE INVERSE TRANSFORMATION.
C 
C
C PROCEDURE PROGRAMMED 1981.07.27 BY C.C.TSCHERNING BASED ON
C TR_U32_34J, TR_U32_34S, TR_U33_45B, TR_34J_U32, TR_34S_U32
C AND TR_45B_U33.
C UPDATED TO INCLUDE S34_COR, 28 JUL 1981, KNUD PODER. 
C ERROR IN S45B -> UTM TOLERANCE SETTING, CORRECTED 21 FEB 1983,
C CCT+ KP
C FORTRAN77  OKT 87 ALP
C
      REAL*8  NN,NIN
      REAL*8 R(8),IC(8)
C
      IF (LANDSDEL.LT.1.OR.LANDSDEL.GT.3) THEN
         WRITE(*,*) 'ILLEGAL LANDSDEL'
         RETURN
      ENDIF
C
C     TRANSFORMATION SEQUENCE
      I=3
      IF (DIRECT) I = 1
      IH = 4 - I
      IS = 2 - I
C
C     CHECK VALUES
      NIN = N
      EIN = E
C
C     OVERALL S34 TOLERANCE
C  3 CM
C     S34TOL  = 0.0030D0
      TOL  = 0.030D0
C     CORRECTIONS FROM CALL OF S34_COR NOT IMPLEMENTED. 
      DN1 = 0.0D0
      DE1 = 0.0D0
C
C     TRANSFORMATION CASES
      DO 100 I = I,IH,IS
      GOTO (10,20,30)I
C
C     TRANSF CASE 1, UTM -> S34
  10  CONTINUE
      NN = 0.0D0
      EE = 0.0D0
      WRITE(*,*)' UTM TIL S34'
      IF (LANDSDEL.EQ.1) THEN
C CASE 1, JYLLAND
        DN = NIN -6 232 935.8D0
        DE = EIN -  595 335.59D0
C
C UTM32 -> S34J, REALPART
        R(1) = +0.000 000 0000D0
        R(2) = +1.000 088 1846D+00
        R(3) = +4.771 309 8892D-12
        R(4) = -1.223 460 1756D-17
        R(5) = +1.873 376 7670D-25
C
C UTM32 -> S34J, IMAG PART
        IC(1) = +0.000 000 0000D0
        IC(2) = +2.000 222 3957D-02
        IC(3) = +3.712 740 0542D-10
        IC(4) = -1.013 825 6711D-16
        IC(5) = -2.861 979 1169D-26
C
        DO 12 IT=5,1,-1
C REAL PART
         Z = DN*NN - DE*EE + R(IT)
C IMAG. PART
         EE = DN*EE + DE*NN +IC(IT)
         NN = Z
   12 CONTINUE
C
CC      IF (DIRECT) TOL = IF S34_COR(NN + 2D5, -EE + 2D5, SA, DN1, DE1) THEN
CC         S34_TOL ELSE -1
C
        NIN = +NN - DN1 + DE1*2D-2
        EIN = -EE + DE1 + DN1*2D-2
        NIN = NIN + 200 000D0
        EIN = EIN + 200 000D0
C END JYLLAND
      ENDIF
C
      IF (LANDSDEL.EQ.2) THEN
C SJ{LLAND
       DN =  NIN -6 232 935.8D0
       DE =  EIN -  595 335.59D0
C
C UTM32 -> S34S, REALPART
        R(1) = +0.000 000 0000D0
        R(2) = +1.000 145 1192D+00
        R(3) = -6.569 134 2276D-11
        R(4) = -2.130 969 7296D-17
        R(5) = +1. 421 5980D-24
C
C UTM32 -> S34S, IMAG PART
        IC(1) = +0.000 000 0000D0
        IC(2) = +2.000 340 0728D-02
        IC(3) = +2.162 188 5061D-09
        IC(4) = -1.017 993 5948D-16
        IC(5) = -1.684 625 2735D-25
C
      DO 14 IT = 5,1,-1
C REAL PART
       Z = DN*NN - DE*EE + R(IT)
C IMAG PART
       EE = DN*EE + DE*NN + IC(IT)
       NN = Z
   14 CONTINUE
C
CC       IF (DIRECT) THEN
CC        TOL = IF S34_COR(NN + 2D5, -EE + 2D5, SA, DN1, DE1) THEN
CC        _      S34_TOL ELSE -1
C
       NIN = +NN - DN1 + DE1*2D-2
       EIN = -EE + DE1 + DN1*2D-2
       NIN = NIN + 200 000D0
       EIN = EIN + 200 000D0
C END SJ{LLAND
      ENDIF
C
      IF (LANDSDEL.EQ.3) THEN
C BORNHOLM
       DN  = NIN - 6 100 000D0
       DE  = EIN -   500 000D0
C
C UTM33 -> S45B, REAL PART
       R(1) = +4.257 993 4018D+04
       R(2) = +1.000 405 3319D+00
       R(3) = -7.703 929 4168D-11
       R(4) = +4.746 039 1692D-15
       R(5) = +1.825 997 5589D-18
       R(6) = -2.072 795 9960D-22
       R(7) = +7.025 727 3976D-27
       R(8) = -8.052 995 7628D-32
C
C UTM33 -> S45B, IMAG PART
       IC(1) = -4.299 354 7686D+04
       IC(2) = -1.464 391 5438D-03
       IC(3) = -4.789 833 8026D-10
       IC(4) = +3.743 207 7762D-14
       IC(5) = -4.889 968 6702D-18
       IC(6) = +2.054 030 0545D-22
       IC(7) = -2.942 101 1013D-27
       IC(8) = +1.538 757 7766D-33
C
       DO 16 IT=8,1,-1
C REAL PART
       Z = DN*NN - DE*EE + R(IT)
C IMAG. PART
       EE = DN*EE + DE*NN + IC(IT)
       NN = Z
   16 CONTINUE
C
       NIN = NN
       EIN = -EE
C
CC       IF (DIRECT) THEN
CC        TOL = IF ABS (NN - 5D4) < 3D4 AND ABS (-EE - 5D4) < 3D4 THEN   
CC        _      S34_TOL ELSE -1
C TEST
C     IF (DIRECT) WRITE(*,*)' DIRECT, NN,EE,TOL ', NN,EE,TOL
C
C      END BORNHOLM
      ENDIF
C END LANDSDEL CASES OG CASE 1
      GOTO 100
C
C     TRANSF CASE 2, OUTPUT OF RESULTS
C ------------------------------------
   20 CONTINUE
C      WRITE(*,*) ' CASE 2 TRANSFER RESULTS'
      Y = NIN
      X = EIN
      GOTO 100
C    END CASE 2
C
C     TRANSF CASE 3, S34 -> UTM
C -----------------------------
  30  CONTINUE
      NN = 0.0D0
      EE = 0.0D0
      IF (LANDSDEL.EQ.1) THEN
C CASE 1, JYLLAND
        DN =  NIN -  200 000D0
        DE = -(EIN -  200 000D0)
C
C S34J -> UTM32, REALPART
        R(1) = +0.000 000 0000
        R(2) = +9.995 120 0000D-01
        R(3) = -2.700 000 0001D-11
        R(4) = +2.000 000 0002D-17
C
C S34J -> UTM32, IMAG PART
        IC(1) = +0.000 000 0000D0
        IC(2) = -1.999 070 0002D-02
        IC(3) = -3.700 000 0002D-10
        IC(4) = +1.000 000 0001D-16
C
        DO 32 IT=4,1,-1
C REAL PART
          Z = DN*NN - DE*EE + R(IT)
C IMAG PART
          EE = DN*EE + DE*NN + IC(IT)
          NN = Z
   32  CONTINUE
C
CC        IF -, DIRECT THEN
CC        TOL = IF S34_COR(DN + 2D5, -DE + 2D5, SA, DN1, DE1) THEN
CC        _      S34_TOL ELSE -1
C
        NIN = NN + DN1
        EIN = EE + DE1
        NIN = NIN + 6 232 935.8D0
        EIN = EIN +   595 335.59D0
C
C      END JYLLAND
      ENDIF
C
      IF (LANDSDEL.EQ.2) THEN
C CASE 2, SJ{LLAND
        DN = NIN -  200 000D0
        DE = -(EIN -  200 000D0)
C
C S34S -> UTM32, REALPART
       R(1) = +0.000 000 0000D0
       R(2) = +9.994 551 0000D-01
       R(3) = -6.399 999 9998D-11
       R(4) = +2.000 000 0000D-17
C
C S34S -> UTM32, IMAG PART
       IC(1) = +0.000 000 0000D0
       IC(2) = -1.998 960 0002D-02
       IC(3) = -2.160 000 0000D-09
       IC(4) = +1.000 000 0000D-16
C
       DO 34 IT=4,1,-1
C REAL PART
       Z = DN*NN - DE*EE + R(IT)
C IMAG PART
       EE = DN*EE + DE*NN + IC(IT)
       NN = Z
   34  CONTINUE
C
CC        IF -, DIRECT THEN
CC        TOL = IF S34_COR(DN + 2D5, -DE + 2D5, SA, DN1, DE1) THEN 
CC        _      S34_TOL ELSE -1
C
        NIN = NN + DN1
        EIN = EE + DE1
        NIN = NIN + 6 232 935.8D0
        EIN = EIN +   595 335.59D0
C
C      END SJ{LLAND
      ENDIF
C
      IF (LANDSDEL.EQ.3) THEN
C      CASE 3, BORNHOLM
       DN  = NIN - 50 000D0
       DE  = -(EIN - 50 000D0)
C
C S45B -> UTM33, REAL PART
       R(1) = +6.107 427 3382D+06
       R(2) = +9.995 996 8336D-01
       R(3) = +1.207 295 7024D-10
       R(4) = -9.459 344 9880D-15
       R(5) = +6.599 486 4072D-19
       R(6) = +2.441 046 6467D-23
       R(7) = -2.894 662 9725D-27
       R(8) = +8.028 219 5772D-32
C
C S45B -> UTM33, IMAG PART
       IC(1) = +4.930 072 5696D+05
       IC(2) = +1.468 676 2273D-03
       IC(3) = +5.490 597 3626D-10
       IC(4) = +2.151 083 3240D-15
       IC(5) = -1.016 347 7904D-18
       IC(6) = +4.472 658 3308D-23
       IC(7) = -1.106 696 6998D-27
       IC(8) = -5.865 810 8998D-34
C
       DO 36 IT = 8,1,-1
C REAL PART
       Z = DN*NN - DE*EE + R(IT)
C IMAG PART
       EE = DN*EE + DE*NN + IC(IT)
       NN = Z
   36  CONTINUE
C
        NIN = NN
        EIN = EE
C
CC        IF -, DIRECT THEN
CC        TOL = IF ABS DN < 3D4 AND ABS DE < 3D4 THEN
CC        _      S34_TOL ELSE -1
C
C      END BORNHOLM
      ENDIF
C    END CASE 3, S34 -> UTM
C
C      GOTO 100
C
  100 CONTINUE
C
C TOL-CHECK OF RESULTS
      IF (DABS(N - NIN).GT.TOL.OR.DABS(E - EIN).GT.TOL) THEN
        IF (DIRECT) THEN 
           WRITE(*,*)' UTM->S34'
        ELSE 
           WRITE(*,*)' S34->UTM'
        ENDIF
       WRITE(*,*)'N, E, DIFF ',N, E, N-NIN, E-EIN
      ENDIF
      RETURN
      END
C
C
      SUBROUTINE DDEG(IDEG,MIN,SEC,RA,IANG)
C THE SUBROUTINE CONVERTS FOR IANG = 1,2,3,4 ANGLES IN (1) DEGREES, MI-
C NUTES, SECONDS, (2) DEGREES, MINUTES, (3) DEGREES AND (4) 400-DEGREES
C TO DECIMAL DEGREES. 
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE:
      IMPLICIT INTEGER(I,J,K,M,N),REAL *8(A-H,O-Z)
      I = 1
      IF (IDEG .LT. 0 .AND. IANG .LT. 3) I = -1
      GO TO (1,2,3,4,3),IANG
    1 J = 1
      IF (MIN.LT.0) J = -1
      SE =I*IDEG*3600+J*MIN*60+SEC
      I = J*I
      GO TO 5
    2 SE=I*IDEG*3600+SEC*60
      GO TO 5
    3 RA = SEC
      RETURN 
    4 SE = SEC*3240
    5 RA= I*SE/3600.0D0  
      RETURN
      END
      BLOCK DATA  
      IMPLICIT REAL *8(A-H,O-Z)
C LU1    LOGICAL UNIT TO READ COORDINATES FROM.
C NPTS   MAXIMAL NUMBER OF DATA POINTS. 
C
      PARAMETER (LU1=10,NPTS=200000)
      COMMON /ITRANC/DX,DY,DZ,EPS3,EPS2,EPS1,S1,AX2,E22
      COMMON /ELL/ ELLIP(15,2),XDBLON(NPTS),YDBLAT(NPTS),TDAT(12),
     *TEMP(NPTS),SA(120),ELLIPTX(16),PROJTX(9)  
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      CHARACTER*60 PROJTX
      CHARACTER*25 ELLIPTX
C
C SEMI-MAJOR AND MINOR AXES OF VARIOUS ELLIPSOIDS. 
      DATA ELLIP/6371000.0D0,6378206.4D0,6378388.0D0,6378137.0D0,
     *6378249.145D0,6377397.155D0,6378245.0D0,6378135.0D0,
     *6378160.0D0,6377563.396D0,6377276.345D0,6378270.0D0,
     *6378166.0D0,2*6371000.0D0,
     *6371000.0D0,6356583.8D0,6356911.946D0,6356752.3142D0,
     *6356514.870D0,6356078.963D0,6356863.019D0,6356750.520D0,
     *6356774.719D0,6356256.909D0,6356075.413D0,6356794.343D0,
     *6356784.284D0,2*6371000.0D0/,D0,D1,D2/0.0D0,1.0D0,2.0D0/
C NAMES OF THE VARIOUS ELLIPSOIDS. 
      DATA ELLIPTX/'SPHERE','CLARKE 1866','HAYFORD 1909',
     *'GRS 1980','CLARK1880','BESSEL 1841','KRASOVSKY 1940',
     *'WGS 1972','AUSTRALIAN 1965','AIRY1849','EVEREST 1830',
     *'HOUGH 1956','FISHER 1960','SPHERE','SPHERE',' USER DEFINED'/
C
      DATA EPS1,EPS2,EPS3,DX,DY,DZ,S1/6*0.0D0,1.0D0/
      DATA PROJTX/'U T M','TRANSVERSE MERCATOR','MERCATOR',
     *'LAMBERT CONFORMAL CONIC (2 STD. PARAL.)',
     *'POLAR STEREOGRAPHIC (AZIMUTHAL-)','S34J','S34S','S45B',
     *'CARTESIAN'/
      END
      SUBROUTINE ANG(IDEG,MIN,SEC,RA,IANG)
C THE SUBROUTINE CONVERTS FOR IANG = 1,2,3,4 ANGLES IN  RADIANS (RAD)
C TO ANGELS IN (1) DEGREES, MINUTES, SECONDS, (2) DEGREES, MINUTES,
C (3) DEGREES AND (4) 400-DEGREES.
C IF DOUBLE PRECISION IS NEEDED, ACTIVATE:
      IMPLICIT INTEGER(I,J,K,M,N),REAL *8(A-H,O-Z)
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      SEC=RA*RADDEG
      IF (IANG.GT.2) RETURN
      I = 1
      IF (RA.LT.D0) I= -1
      SEC=SEC*I
      IDEG=IFRAC(SEC)
      SEC=SEC-IDEG
      SEC=SEC*60.0D0
      IF (IANG.EQ.2) THEN
      IF (IDEG.GT.0) THEN
      IDEG=IDEG*I
      ELSE
      SEC=SEC*I
      END IF
      RETURN
      END IF
      MIN=IFRAC(SEC)
      SEC=(SEC-MIN)*60.0D0
      IF (IDEG.GT.0) THEN
      IDEG=IDEG*I
      ELSE
      IF (MIN.GT.0) THEN
      MIN=MIN*I
      ELSE
      SEC=SEC*I
      END IF
      END IF
      RETURN
      END
      SUBROUTINE EUCLID(COSLAP,SINLAP,COSLOP,SINLOP,H)
C PROGRAMMED BY C.C.TSCHERNING, GEODETIC INSTITUTE OF DENMARK, 1974.
C UPDATES: NONE.
C COMPUTATION OF EUCLIDIAN COORDINATES X,Y,Z , DISTANCE AND SQUARE OF
C DISTANCE FROM Z-AXIS XY, XY2 AND DISTANCE AND SQUARE OF DISTANCE FROM
C THE ORIGIN DISTO AND DIST2 FROM GEODETIC COORDINATES REFERING TO AN
C ELLIPSOID HAVING SEMI-MAJOR AXIS EQUAL TO AX AND SECOND EXCENTRICITY
C E2.
C IF DOUBLE PRECISION IS NEEDED ACTIVATE:
      IMPLICIT INTEGER(I,J,K,M,N), REAL *8(A-H,O-Z)
C AND USE DSQRT, DCOS AND DSIN IN THE FOLLOWING.
      COMMON /EUCL/X,Y,Z,XY,XY2,DISTO,DIST2
      COMMON /ITRANC/DX,DY,DZ,EPS3,EPS2,EPS1,S1,AX,E2
      DN = AX/ SQRT(1.0D0-E2*SINLAP**2)
      Z = ((1.0D0-E2)*DN+H)*SINLAP
      XY = (DN+H)*COSLAP
      XY2 = XY*XY
      DIST2 = XY2+Z*Z
      DISTO =  SQRT(DIST2)
      X = XY* COSLOP
      Y = XY* SINLOP
      RETURN
      END
      SUBROUTINE GEOEUC(RLATP,RLONGP,HP,FORWARD)
      IMPLICIT REAL *8(A-H,O-Z)
      LOGICAL FORWARD 
      COMMON /EUCL/X,Y,Z,XY,XY2,DISTO,DIST2
      COMMON /ITRANC/DX,DY,DZ,EPS3,EPS2,EPS1,S1,AX2,E22
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      IF (FORWARD) THEN
      SINLAP=SIN(RLATP)
      COSLAP=COS(RLATP)
      SINLOP=SIN(RLONGP)
      COSLOP=COS(RLONGP)
      CALL EUCLID(COSLAP,SINLAP,COSLOP,SINLOP,HP)
      CALL ETRANS(SINLAP,COSLAP,RLATQ,SINLOP,COSLOP,RLONGQ,DH)
      DLAT=(RLATP-RLATQ)*RADDEG
      DLON=(RLONGP-RLONGQ)*RADDEG
      DH=HP-DH
      IF (ABS(DLAT).GT.1.0D-1.OR.ABS(DLON).GT.1.0D-1.OR.
     *ABS(DH).GT.1000.0) WRITE(*,100)DLAT,DLON,DH
  100 FORMAT(' DLAT,DLON,DH=',2F14.9,f9.3)
      ELSE
      X1=X
      Y1=Y
      Z1=Z
      XY2=X**2+Y**2
      XY=SQRT(XY2)
      DIST2=XY2+Z**2
      DISTO=SQRT(DIST2)
      CALL ETRANS(SINLAP,COSLAP,RLATP,SINLOP,COSLOP,RLONGP,HP)
      CALL EUCLID(COSLAP,SINLAP,COSLOP,SINLOP,HP)
      DDX=X1-X
      DDY=Y1-Y
      DDZ=Z1-Z
      DERR=SQRT(DDX**2+DDY**2+DDZ**2)
      IF (DERR.GT.1.0D-4.AND.ABS(DX).LT.0.001.AND.(ABS(DY).LT.0.001)
     *.AND.ABS(DZ).LT.0.001) WRITE(*,101)DDX,DDY,DDZ
  101 FORMAT(3F8.2)
      END IF
      RETURN
      END
      SUBROUTINE ETRANS(SINLAP,COSLAP,RLATP,SINLOP,COSLOP,RLONGP,DH)
C ORIGINAL VERSION PROGRAMMED IN 1974 BY C.C.TSCHERNING, GEODAETISK
C INSTITUT. LATEST UPDATE 7 OCT 1987.
C
C THE SUBROUTINE TRANSFORMS THE COORDINATES FROM ONE DATUM TO ANOTHER
C USING THE 7-PARAMETER DATUM-SHIFT GIVEN BY DX,DY,DZ,DL,EPS1,EPS2,
C EPS3.
C
C INPUT OF COS AND SIN TO LATITUDE, LATITUDE, LONGITUDE (RADIANS),
C
C IF DOUBLE PRECISION IS NEEDED ACTIVATE:
      IMPLICIT INTEGER(I,J,K,N,M),LOGICAL(L),REAL *8(A-H,O-Z)
C AND USE DSIN, DCOS, DATAN2, DABS BELOW.
      LOGICAL LF,LT
      COMMON /EUCL/X,Y,Z,XY,XY2,DISTO,DIST2
      COMMON /ITRANC/DX,DY,DZ,EPS3,EPS2,EPS1,S1,AX2,E22
      COMMON /CONST/PI,PI4,RADDEG,DEGRAD,D0,D1,D2 
      RADSEC=RADDEG/3600
      DX1=DX
      DY1=DY
      DZ1=DZ
      X1 = X
      Y1 = Y
      X0 = DX1+S1*(X+EPS1*Y-EPS2*Z)
      Y0 = DY1+S1*(Y-EPS1*X1+EPS3*Z)
      Z0 = DZ1+S1*(Z+EPS2*X1-EPS3*Y1)
      XY20= X0*X0+Y0*Y0
      XY0 =  SQRT(XY20)
      DIST20 = XY20+Z0*Z0
      DISTO0 =  SQRT(DIST20)
      RLONG =  ATAN2(Y0,X0)
C
C  COMPUTATION OF THE NEW GEODETIC LATITUDE, CF REF(C) PAGE 183.
      DH = D0
      RLAT1 =  ATAN2(Z0,XY0)
      COSLA=COS(RLAT1)
      SINLAP=SIN(RLAT1)
      S = AX2/ SQRT(D1-E22*SINLAP**2)
      I=0
   70 RLAT = RLAT1
C
      I=I+1
      RLAT1 =  ATAN2(Z0,XY0-E22*S*COSLA)
      COSLA =  COS(RLAT1)
      S = AX2/ SQRT(D1-E22*(D1-COSLA**2))
      DH = XY0/COSLA-S
      IF (I.GT.10)WRITE(6,*)DH,RLAT1,RLAT
      IF ( ABS(RLAT1-RLAT).GT.1.0D-10.AND.I.LT.20) GO TO 70
C
      RLONGP = RLONG
      RLATP = RLAT1
      SINLOP= SIN(RLONG)
      COSLOP= COS(RLONG)
      COSLAP=COSLA
      SINLAP= SIN(RLATP)
      X=X0
      Y=Y0
      Z=Z0
      XY=XY0
      XY2=XY20
      DISTO=DISTO0
      DIST2=DIST20
C
      RETURN
      END
C ------------------------------------------------------------
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                  C
C                      I F R A C                                   C
C                                                                  C
C  SUBROUTINE GIVING TRUE INTEGER PART OF REAL REAL    C
C                                                                  C
C  RF, JUNE 1983                                                   C
C                                                                  C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
      INTEGER FUNCTION IFRAC(R)
C
      IMPLICIT REAL *8(A-H,O-Z)
      IF (R.LT.0.0D0) GO TO 1
        IFRAC = R
      RETURN
 1      IFRAC = R - 0.999999999D0
      RETURN
      END
